2015-11-24 16:23:19,44615-11-24 16:23:19 DEBUG (BasicTypeRegistry.java:147 LINE) BasicTypeRegistry.register -> Adding type registration wrapper-characters -> org.hibernate.type.CharacterArrayType@a8a8b1e
2015-11-24 16:23:19,44715-11-24 16:23:19 DEBUG (BasicTypeRegistry.java:147 LINE) BasicTypeRegistry.register -> Adding type registration [Ljava.lang.Character; -> org.hibernate.type.CharacterArrayType@a8a8b1e
2015-11-24 16:23:19,44715-11-24 16:23:19 DEBUG (BasicTypeRegistry.java:147 LINE) BasicTypeRegistry.register -> Adding type registration Character[] -> org.hibernate.type.CharacterArrayType@a8a8b1e
2015-11-24 16:23:19,44815-11-24 16:23:19 DEBUG (BasicTypeRegistry.java:147 LINE) BasicTypeRegistry.register -> Adding type registration text -> org.hibernate.type.TextType@70ea9f38
2015-11-24 16:23:19,45515-11-24 16:23:19 DEBUG (BasicTypeRegistry.java:147 LINE) BasicTypeRegistry.register -> Adding type registration blob -> org.hibernate.type.BlobType@597e9be9
2015-11-24 16:23:19,45615-11-24 16:23:19 DEBUG (BasicTypeRegistry.java:147 LINE) BasicTypeRegistry.register -> Adding type registration java.sql.Blob -> org.hibernate.type.BlobType@597e9be9
2015-11-24 16:23:19,45615-11-24 16:23:19 DEBUG (BasicTypeRegistry.java:147 LINE) BasicTypeRegistry.register -> Adding type registration materialized_blob -> org.hibernate.type.MaterializedBlobType@3948166e
2015-11-24 16:23:19,45715-11-24 16:23:19 DEBUG (BasicTypeRegistry.java:147 LINE) BasicTypeRegistry.register -> Adding type registration wrapper_materialized_blob -> org.hibernate.type.WrappedMaterializedBlobType@1f4f53dd
2015-11-24 16:23:19,47715-11-24 16:23:19 DEBUG (BasicTypeRegistry.java:147 LINE) BasicTypeRegistry.register -> Adding type registration clob -> org.hibernate.type.ClobType@36162346
2015-11-24 16:23:19,47815-11-24 16:23:19 DEBUG (BasicTypeRegistry.java:147 LINE) BasicTypeRegistry.register -> Adding type registration java.sql.Clob -> org.hibernate.type.ClobType@36162346
2015-11-24 16:23:19,47915-11-24 16:23:19 DEBUG (BasicTypeRegistry.java:147 LINE) BasicTypeRegistry.register -> Adding type registration materialized_clob -> org.hibernate.type.MaterializedClobType@278a1cfb
2015-11-24 16:23:19,48015-11-24 16:23:19 DEBUG (BasicTypeRegistry.java:147 LINE) BasicTypeRegistry.register -> Adding type registration wrapper_characters_clob -> org.hibernate.type.CharacterArrayClobType@6f6c1fb0
2015-11-24 16:23:19,48115-11-24 16:23:19 DEBUG (BasicTypeRegistry.java:147 LINE) BasicTypeRegistry.register -> Adding type registration characters_clob -> org.hibernate.type.PrimitiveCharacterArrayClobType@1e78a60e
2015-11-24 16:23:19,53215-11-24 16:23:19 DEBUG (BasicTypeRegistry.java:147 LINE) BasicTypeRegistry.register -> Adding type registration serializable -> org.hibernate.type.SerializableType@5c9c2f98
2015-11-24 16:23:19,53715-11-24 16:23:19 DEBUG (BasicTypeRegistry.java:147 LINE) BasicTypeRegistry.register -> Adding type registration object -> org.hibernate.type.ObjectType@76f294c5
2015-11-24 16:23:19,53715-11-24 16:23:19 DEBUG (BasicTypeRegistry.java:147 LINE) BasicTypeRegistry.register -> Adding type registration java.lang.Object -> org.hibernate.type.ObjectType@76f294c5
2015-11-24 16:23:19,53815-11-24 16:23:19 DEBUG (BasicTypeRegistry.java:147 LINE) BasicTypeRegistry.register -> Adding type registration imm_date -> org.hibernate.type.AdaptedImmutableType@609912f5
2015-11-24 16:23:19,53915-11-24 16:23:19 DEBUG (BasicTypeRegistry.java:147 LINE) BasicTypeRegistry.register -> Adding type registration imm_time -> org.hibernate.type.AdaptedImmutableType@61abc45e
2015-11-24 16:23:19,53915-11-24 16:23:19 DEBUG (BasicTypeRegistry.java:147 LINE) BasicTypeRegistry.register -> Adding type registration imm_timestamp -> org.hibernate.type.AdaptedImmutableType@53e9296a
2015-11-24 16:23:19,53915-11-24 16:23:19 DEBUG (BasicTypeRegistry.java:147 LINE) BasicTypeRegistry.register -> Adding type registration imm_dbtimestamp -> org.hibernate.type.AdaptedImmutableType@709e192f
2015-11-24 16:23:19,53915-11-24 16:23:19 DEBUG (BasicTypeRegistry.java:147 LINE) BasicTypeRegistry.register -> Adding type registration imm_calendar -> org.hibernate.type.AdaptedImmutableType@1b87966c
2015-11-24 16:23:19,54015-11-24 16:23:19 DEBUG (BasicTypeRegistry.java:147 LINE) BasicTypeRegistry.register -> Adding type registration imm_calendar_date -> org.hibernate.type.AdaptedImmutableType@62a49a92
2015-11-24 16:23:19,54015-11-24 16:23:19 DEBUG (BasicTypeRegistry.java:147 LINE) BasicTypeRegistry.register -> Adding type registration imm_binary -> org.hibernate.type.AdaptedImmutableType@24a019d6
2015-11-24 16:23:19,54015-11-24 16:23:19 DEBUG (BasicTypeRegistry.java:147 LINE) BasicTypeRegistry.register -> Adding type registration imm_serializable -> org.hibernate.type.AdaptedImmutableType@b004363
2015-11-24 16:23:19,56715-11-24 16:23:19  INFO (Version.java:37 LINE) Version.<clinit> -> Hibernate Commons Annotations 3.2.0.Final
2015-11-24 16:23:19,57315-11-24 16:23:19  INFO (Environment.java:603 LINE) Environment.<clinit> -> Hibernate 3.6.8.Final
2015-11-24 16:23:19,57515-11-24 16:23:19  INFO (Environment.java:636 LINE) Environment.<clinit> -> hibernate.properties not found
2015-11-24 16:23:19,57815-11-24 16:23:19  INFO (Environment.java:814 LINE) Environment.buildBytecodeProvider -> Bytecode provider name : javassist
2015-11-24 16:23:19,58115-11-24 16:23:19  INFO (Environment.java:695 LINE) Environment.<clinit> -> using JDK 1.4 java.sql.Timestamp handling
2015-11-24 16:23:19,69615-11-24 16:23:19 DEBUG (DefaultIdentifierGeneratorFactory.java:100 LINE) DefaultIdentifierGeneratorFactory.register -> Registering IdentifierGenerator strategy [uuid2] -> [class org.hibernate.id.UUIDGenerator]
2015-11-24 16:23:19,69715-11-24 16:23:19 DEBUG (DefaultIdentifierGeneratorFactory.java:100 LINE) DefaultIdentifierGeneratorFactory.register -> Registering IdentifierGenerator strategy [guid] -> [class org.hibernate.id.GUIDGenerator]
2015-11-24 16:23:19,69915-11-24 16:23:19 DEBUG (DefaultIdentifierGeneratorFactory.java:100 LINE) DefaultIdentifierGeneratorFactory.register -> Registering IdentifierGenerator strategy [uuid] -> [class org.hibernate.id.UUIDHexGenerator]
2015-11-24 16:23:19,69915-11-24 16:23:19 DEBUG (DefaultIdentifierGeneratorFactory.java:100 LINE) DefaultIdentifierGeneratorFactory.register -> Registering IdentifierGenerator strategy [uuid.hex] -> [class org.hibernate.id.UUIDHexGenerator]
2015-11-24 16:23:19,70215-11-24 16:23:19 DEBUG (DefaultIdentifierGeneratorFactory.java:100 LINE) DefaultIdentifierGeneratorFactory.register -> Registering IdentifierGenerator strategy [hilo] -> [class org.hibernate.id.TableHiLoGenerator]
2015-11-24 16:23:19,70315-11-24 16:23:19 DEBUG (DefaultIdentifierGeneratorFactory.java:100 LINE) DefaultIdentifierGeneratorFactory.register -> Registering IdentifierGenerator strategy [assigned] -> [class org.hibernate.id.Assigned]
2015-11-24 16:23:19,70515-11-24 16:23:19 DEBUG (DefaultIdentifierGeneratorFactory.java:100 LINE) DefaultIdentifierGeneratorFactory.register -> Registering IdentifierGenerator strategy [identity] -> [class org.hibernate.id.IdentityGenerator]
2015-11-24 16:23:19,70615-11-24 16:23:19 DEBUG (DefaultIdentifierGeneratorFactory.java:100 LINE) DefaultIdentifierGeneratorFactory.register -> Registering IdentifierGenerator strategy [select] -> [class org.hibernate.id.SelectGenerator]
2015-11-24 16:23:19,70715-11-24 16:23:19 DEBUG (DefaultIdentifierGeneratorFactory.java:100 LINE) DefaultIdentifierGeneratorFactory.register -> Registering IdentifierGenerator strategy [sequence] -> [class org.hibernate.id.SequenceGenerator]
2015-11-24 16:23:19,70715-11-24 16:23:19 DEBUG (DefaultIdentifierGeneratorFactory.java:100 LINE) DefaultIdentifierGeneratorFactory.register -> Registering IdentifierGenerator strategy [seqhilo] -> [class org.hibernate.id.SequenceHiLoGenerator]
2015-11-24 16:23:19,70815-11-24 16:23:19 DEBUG (DefaultIdentifierGeneratorFactory.java:100 LINE) DefaultIdentifierGeneratorFactory.register -> Registering IdentifierGenerator strategy [increment] -> [class org.hibernate.id.IncrementGenerator]
2015-11-24 16:23:19,70915-11-24 16:23:19 DEBUG (DefaultIdentifierGeneratorFactory.java:100 LINE) DefaultIdentifierGeneratorFactory.register -> Registering IdentifierGenerator strategy [foreign] -> [class org.hibernate.id.ForeignGenerator]
2015-11-24 16:23:19,71015-11-24 16:23:19 DEBUG (DefaultIdentifierGeneratorFactory.java:100 LINE) DefaultIdentifierGeneratorFactory.register -> Registering IdentifierGenerator strategy [sequence-identity] -> [class org.hibernate.id.SequenceIdentityGenerator]
2015-11-24 16:23:19,71115-11-24 16:23:19 DEBUG (DefaultIdentifierGeneratorFactory.java:100 LINE) DefaultIdentifierGeneratorFactory.register -> Registering IdentifierGenerator strategy [enhanced-sequence] -> [class org.hibernate.id.enhanced.SequenceStyleGenerator]
2015-11-24 16:23:19,71215-11-24 16:23:19 DEBUG (DefaultIdentifierGeneratorFactory.java:100 LINE) DefaultIdentifierGeneratorFactory.register -> Registering IdentifierGenerator strategy [enhanced-table] -> [class org.hibernate.id.enhanced.TableGenerator]
2015-11-24 16:23:19,79615-11-24 16:23:19 DEBUG (DTDEntityResolver.java:67 LINE) DTDEntityResolver.resolveEntity -> trying to resolve system-id [http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd]
2015-11-24 16:23:19,79615-11-24 16:23:19  WARN (DTDEntityResolver.java:73 LINE) DTDEntityResolver.resolveEntity -> recognized obsolete hibernate namespace http://hibernate.sourceforge.net/. Use namespace http://www.hibernate.org/dtd/ instead. Refer to Hibernate 3.6 Migration Guide!
2015-11-24 16:23:19,79715-11-24 16:23:19 DEBUG (DTDEntityResolver.java:77 LINE) DTDEntityResolver.resolveEntity -> attempting to resolve on classpath under org/hibernate/
2015-11-24 16:23:19,79815-11-24 16:23:19 DEBUG (DTDEntityResolver.java:109 LINE) DTDEntityResolver.resolveOnClassPath -> located [http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd] in classpath
2015-11-24 16:23:19,85215-11-24 16:23:19 DEBUG (DTDEntityResolver.java:67 LINE) DTDEntityResolver.resolveEntity -> trying to resolve system-id [http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd]
2015-11-24 16:23:19,85315-11-24 16:23:19  WARN (DTDEntityResolver.java:73 LINE) DTDEntityResolver.resolveEntity -> recognized obsolete hibernate namespace http://hibernate.sourceforge.net/. Use namespace http://www.hibernate.org/dtd/ instead. Refer to Hibernate 3.6 Migration Guide!
2015-11-24 16:23:19,85315-11-24 16:23:19 DEBUG (DTDEntityResolver.java:77 LINE) DTDEntityResolver.resolveEntity -> attempting to resolve on classpath under org/hibernate/
2015-11-24 16:23:19,85515-11-24 16:23:19 DEBUG (DTDEntityResolver.java:109 LINE) DTDEntityResolver.resolveOnClassPath -> located [http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd] in classpath
2015-11-24 16:23:19,91415-11-24 16:23:19 DEBUG (DTDEntityResolver.java:67 LINE) DTDEntityResolver.resolveEntity -> trying to resolve system-id [http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd]
2015-11-24 16:23:19,91515-11-24 16:23:19  WARN (DTDEntityResolver.java:73 LINE) DTDEntityResolver.resolveEntity -> recognized obsolete hibernate namespace http://hibernate.sourceforge.net/. Use namespace http://www.hibernate.org/dtd/ instead. Refer to Hibernate 3.6 Migration Guide!
2015-11-24 16:23:19,91515-11-24 16:23:19 DEBUG (DTDEntityResolver.java:77 LINE) DTDEntityResolver.resolveEntity -> attempting to resolve on classpath under org/hibernate/
2015-11-24 16:23:19,91615-11-24 16:23:19 DEBUG (DTDEntityResolver.java:109 LINE) DTDEntityResolver.resolveOnClassPath -> located [http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd] in classpath
2015-11-24 16:23:20,07015-11-24 16:23:20 DEBUG (Configuration.java:3995 LINE) Configuration$MetadataSourceQueue.processHbmXmlQueue -> Processing hbm.xml files
2015-11-24 16:23:20,09815-11-24 16:23:20  INFO (HbmBinder.java:353 LINE) HbmBinder.bindRootPersistentClassCommonValues -> Mapping class: com.fx.mobile.model.UserOperate -> user_operate
2015-11-24 16:23:20,10315-11-24 16:23:20 DEBUG (HbmBinder.java:1354 LINE) HbmBinder.bindProperty -> Mapped property: id -> id
2015-11-24 16:23:20,11015-11-24 16:23:20 DEBUG (HbmBinder.java:1354 LINE) HbmBinder.bindProperty -> Mapped property: userName -> userName
2015-11-24 16:23:20,11015-11-24 16:23:20 DEBUG (HbmBinder.java:1354 LINE) HbmBinder.bindProperty -> Mapped property: userPassword -> userPassword
2015-11-24 16:23:20,11115-11-24 16:23:20 DEBUG (HbmBinder.java:1354 LINE) HbmBinder.bindProperty -> Mapped property: phicommId -> phicomm_id
2015-11-24 16:23:20,11115-11-24 16:23:20 DEBUG (HbmBinder.java:1354 LINE) HbmBinder.bindProperty -> Mapped property: userEmail -> userEmail
2015-11-24 16:23:20,11115-11-24 16:23:20 DEBUG (HbmBinder.java:1354 LINE) HbmBinder.bindProperty -> Mapped property: userPhoneNumb -> user_PhoneNumb
2015-11-24 16:23:20,11115-11-24 16:23:20 DEBUG (HbmBinder.java:1354 LINE) HbmBinder.bindProperty -> Mapped property: userType -> userType
2015-11-24 16:23:20,11215-11-24 16:23:20 DEBUG (HbmBinder.java:1354 LINE) HbmBinder.bindProperty -> Mapped property: isChecked -> isChecked
2015-11-24 16:23:20,11215-11-24 16:23:20 DEBUG (HbmBinder.java:1354 LINE) HbmBinder.bindProperty -> Mapped property: nickname -> nickname
2015-11-24 16:23:20,11215-11-24 16:23:20 DEBUG (HbmBinder.java:1354 LINE) HbmBinder.bindProperty -> Mapped property: figureurl -> figureurl
2015-11-24 16:23:20,11215-11-24 16:23:20 DEBUG (HbmBinder.java:1354 LINE) HbmBinder.bindProperty -> Mapped property: sex -> sex
2015-11-24 16:23:20,11315-11-24 16:23:20 DEBUG (HbmBinder.java:1354 LINE) HbmBinder.bindProperty -> Mapped property: province -> province
2015-11-24 16:23:20,11315-11-24 16:23:20 DEBUG (HbmBinder.java:1354 LINE) HbmBinder.bindProperty -> Mapped property: city -> city
2015-11-24 16:23:20,11315-11-24 16:23:20 DEBUG (HbmBinder.java:1354 LINE) HbmBinder.bindProperty -> Mapped property: birthday -> birthday
2015-11-24 16:23:20,11315-11-24 16:23:20 DEBUG (HbmBinder.java:1354 LINE) HbmBinder.bindProperty -> Mapped property: openId -> open_id
2015-11-24 16:23:20,11315-11-24 16:23:20 DEBUG (HbmBinder.java:1354 LINE) HbmBinder.bindProperty -> Mapped property: openKey -> open_key
2015-11-24 16:23:20,11415-11-24 16:23:20 DEBUG (HbmBinder.java:1354 LINE) HbmBinder.bindProperty -> Mapped property: accessToken -> access_token
2015-11-24 16:23:20,11415-11-24 16:23:20 DEBUG (HbmBinder.java:1354 LINE) HbmBinder.bindProperty -> Mapped property: expireseIn -> expirese_in
2015-11-24 16:23:20,11415-11-24 16:23:20 DEBUG (HbmBinder.java:1354 LINE) HbmBinder.bindProperty -> Mapped property: devinfo -> devinfo
2015-11-24 16:23:20,11415-11-24 16:23:20 DEBUG (HbmBinder.java:1354 LINE) HbmBinder.bindProperty -> Mapped property: userinfo -> userinfo
2015-11-24 16:23:20,11515-11-24 16:23:20 DEBUG (HbmBinder.java:1354 LINE) HbmBinder.bindProperty -> Mapped property: openqq -> openqq
2015-11-24 16:23:20,11515-11-24 16:23:20 DEBUG (HbmBinder.java:1354 LINE) HbmBinder.bindProperty -> Mapped property: openqqinfo -> openqqinfo
2015-11-24 16:23:20,11515-11-24 16:23:20 DEBUG (HbmBinder.java:1354 LINE) HbmBinder.bindProperty -> Mapped property: opensina -> opensina
2015-11-24 16:23:20,11515-11-24 16:23:20 DEBUG (HbmBinder.java:1354 LINE) HbmBinder.bindProperty -> Mapped property: opensinainfo -> opensinainfo
2015-11-24 16:23:20,11515-11-24 16:23:20 DEBUG (HbmBinder.java:1354 LINE) HbmBinder.bindProperty -> Mapped property: createTime -> createTime
2015-11-24 16:23:20,11615-11-24 16:23:20 DEBUG (HbmBinder.java:1354 LINE) HbmBinder.bindProperty -> Mapped property: updateTime -> updateTime
2015-11-24 16:23:20,11615-11-24 16:23:20 DEBUG (HbmBinder.java:1354 LINE) HbmBinder.bindProperty -> Mapped property: lastLoginTime -> lastLoginTime
2015-11-24 16:23:20,11615-11-24 16:23:20  INFO (HbmBinder.java:353 LINE) HbmBinder.bindRootPersistentClassCommonValues -> Mapping class: com.fx.mobile.model.NoteNumbRecord -> note_numb_record
2015-11-24 16:23:20,11615-11-24 16:23:20 DEBUG (HbmBinder.java:1354 LINE) HbmBinder.bindProperty -> Mapped property: id -> id
2015-11-24 16:23:20,11715-11-24 16:23:20 DEBUG (HbmBinder.java:1354 LINE) HbmBinder.bindProperty -> Mapped property: nodeNumb -> node_numb
2015-11-24 16:23:20,11715-11-24 16:23:20  INFO (HbmBinder.java:353 LINE) HbmBinder.bindRootPersistentClassCommonValues -> Mapping class: com.fx.mobile.model.CrashLog -> crash_log
2015-11-24 16:23:20,11815-11-24 16:23:20 DEBUG (HbmBinder.java:1354 LINE) HbmBinder.bindProperty -> Mapped property: id -> id
2015-11-24 16:23:20,11915-11-24 16:23:20 DEBUG (HbmBinder.java:1354 LINE) HbmBinder.bindProperty -> Mapped property: url -> url
2015-11-24 16:23:20,11915-11-24 16:23:20 DEBUG (HbmBinder.java:1354 LINE) HbmBinder.bindProperty -> Mapped property: describes -> describes
2015-11-24 16:23:20,11915-11-24 16:23:20 DEBUG (HbmBinder.java:1354 LINE) HbmBinder.bindProperty -> Mapped property: addDate -> addDate
2015-11-24 16:23:20,12015-11-24 16:23:20 DEBUG (Configuration.java:4025 LINE) Configuration$MetadataSourceQueue.processAnnotatedClassesQueue -> Process annotated classes
2015-11-24 16:23:20,12415-11-24 16:23:20 DEBUG (Configuration.java:1466 LINE) Configuration.processFkSecondPassInOrder -> processing fk mappings (*ToOne and JoinedSubclass)
2015-11-24 16:23:20,14015-11-24 16:23:20 DEBUG (Configuration.java:1708 LINE) Configuration.originalSecondPassCompile -> processing extends queue
2015-11-24 16:23:20,14115-11-24 16:23:20 DEBUG (Configuration.java:1762 LINE) Configuration.processExtendsQueue -> processing extends queue
2015-11-24 16:23:20,14115-11-24 16:23:20 DEBUG (Configuration.java:1711 LINE) Configuration.originalSecondPassCompile -> processing collection mappings
2015-11-24 16:23:20,14115-11-24 16:23:20 DEBUG (Configuration.java:1721 LINE) Configuration.originalSecondPassCompile -> processing native query and ResultSetMapping mappings
2015-11-24 16:23:20,14115-11-24 16:23:20 DEBUG (Configuration.java:1729 LINE) Configuration.originalSecondPassCompile -> processing association property references
2015-11-24 16:23:20,14215-11-24 16:23:20 DEBUG (Configuration.java:1751 LINE) Configuration.originalSecondPassCompile -> processing foreign key constraints
2015-11-24 16:23:20,16415-11-24 16:23:20  INFO (Configuration.java:1676 LINE) Configuration.applyHibernateValidatorLegacyConstraintsOnDDL -> Hibernate Validator not found: ignoring
2015-11-24 16:23:20,21915-11-24 16:23:20 DEBUG (LoggerFactory.java:29 LINE) LoggerFactory.make -> Logging Provider: org.jboss.logging.Log4jLoggerProvider
2015-11-24 16:23:20,22015-11-24 16:23:20  INFO (Version.java:27 LINE) Version.<clinit> -> HV000001: Hibernate Validator 5.0.0.Final
2015-11-24 16:23:20,24115-11-24 16:23:20 DEBUG (DefaultTraversableResolver.java:84 LINE) DefaultTraversableResolver.detectJPA -> Found javax.persistence.Persistence on classpath, but no method 'getPersistenceUtil'. Assuming JPA 1 environment. All properties will per default be traversable.
2015-11-24 16:23:20,25115-11-24 16:23:20 DEBUG (ValidationXmlParser.java:88 LINE) ValidationXmlParser.getInputStream -> Trying to load META-INF/validation.xml for XML based Validator configuration.
2015-11-24 16:23:20,25815-11-24 16:23:20 DEBUG (ValidationXmlParser.java:95 LINE) ValidationXmlParser.getInputStream -> No META-INF/validation.xml found. Using annotation based configuration only.
2015-11-24 16:23:20,49815-11-24 16:23:20  INFO (LocalSessionFactoryBean.java:780 LINE) LocalSessionFactoryBean.buildSessionFactory -> Building new Hibernate SessionFactory
2015-11-24 16:23:20,49815-11-24 16:23:20 DEBUG (Configuration.java:1854 LINE) Configuration.buildSessionFactory -> Preparing to build session factory with filters : {}
2015-11-24 16:23:20,49815-11-24 16:23:20 DEBUG (Configuration.java:3995 LINE) Configuration$MetadataSourceQueue.processHbmXmlQueue -> Processing hbm.xml files
2015-11-24 16:23:20,49915-11-24 16:23:20 DEBUG (Configuration.java:4025 LINE) Configuration$MetadataSourceQueue.processAnnotatedClassesQueue -> Process annotated classes
2015-11-24 16:23:20,49915-11-24 16:23:20 DEBUG (Configuration.java:1466 LINE) Configuration.processFkSecondPassInOrder -> processing fk mappings (*ToOne and JoinedSubclass)
2015-11-24 16:23:20,49915-11-24 16:23:20 DEBUG (Configuration.java:1708 LINE) Configuration.originalSecondPassCompile -> processing extends queue
2015-11-24 16:23:20,50015-11-24 16:23:20 DEBUG (Configuration.java:1762 LINE) Configuration.processExtendsQueue -> processing extends queue
2015-11-24 16:23:20,50015-11-24 16:23:20 DEBUG (Configuration.java:1711 LINE) Configuration.originalSecondPassCompile -> processing collection mappings
2015-11-24 16:23:20,50015-11-24 16:23:20 DEBUG (Configuration.java:1721 LINE) Configuration.originalSecondPassCompile -> processing native query and ResultSetMapping mappings
2015-11-24 16:23:20,50015-11-24 16:23:20 DEBUG (Configuration.java:1729 LINE) Configuration.originalSecondPassCompile -> processing association property references
2015-11-24 16:23:20,50115-11-24 16:23:20 DEBUG (Configuration.java:1751 LINE) Configuration.originalSecondPassCompile -> processing foreign key constraints
2015-11-24 16:23:20,50215-11-24 16:23:20 DEBUG (DefaultTraversableResolver.java:84 LINE) DefaultTraversableResolver.detectJPA -> Found javax.persistence.Persistence on classpath, but no method 'getPersistenceUtil'. Assuming JPA 1 environment. All properties will per default be traversable.
2015-11-24 16:23:20,50215-11-24 16:23:20 DEBUG (ValidationXmlParser.java:88 LINE) ValidationXmlParser.getInputStream -> Trying to load META-INF/validation.xml for XML based Validator configuration.
2015-11-24 16:23:20,51615-11-24 16:23:20 DEBUG (ValidationXmlParser.java:95 LINE) ValidationXmlParser.getInputStream -> No META-INF/validation.xml found. Using annotation based configuration only.
2015-11-24 16:23:20,53615-11-24 16:23:20 DEBUG (Configuration.java:1896 LINE) Configuration.enableLegacyHibernateValidator -> Legacy Validator not present in classpath, ignoring event listener registration
2015-11-24 16:23:20,53615-11-24 16:23:20 DEBUG (DefaultTraversableResolver.java:84 LINE) DefaultTraversableResolver.detectJPA -> Found javax.persistence.Persistence on classpath, but no method 'getPersistenceUtil'. Assuming JPA 1 environment. All properties will per default be traversable.
2015-11-24 16:23:20,53715-11-24 16:23:20 DEBUG (ValidationXmlParser.java:88 LINE) ValidationXmlParser.getInputStream -> Trying to load META-INF/validation.xml for XML based Validator configuration.
2015-11-24 16:23:20,53715-11-24 16:23:20 DEBUG (ValidationXmlParser.java:95 LINE) ValidationXmlParser.getInputStream -> No META-INF/validation.xml found. Using annotation based configuration only.
2015-11-24 16:23:20,58815-11-24 16:23:20 DEBUG (HibernateSearchEventListenerRegister.java:231 LINE) HibernateSearchEventListenerRegister.attemptToLoadSearchEventListener -> Search not present in classpath, ignoring event listener registration.
2015-11-24 16:23:20,58915-11-24 16:23:20  INFO (HibernateSearchEventListenerRegister.java:75 LINE) HibernateSearchEventListenerRegister.enableHibernateSearch -> Unable to find org.hibernate.search.event.FullTextIndexEventListener on the classpath. Hibernate Search is not enabled.
2015-11-24 16:23:20,59415-11-24 16:23:20  INFO (ConnectionProviderFactory.java:173 LINE) ConnectionProviderFactory.initializeConnectionProviderFromConfig -> Initializing connection provider: org.springframework.orm.hibernate3.LocalDataSourceConnectionProvider
2015-11-24 16:23:21,04015-11-24 16:23:21  INFO (Dialect.java:135 LINE) Dialect.<init> -> Using dialect: org.hibernate.dialect.MySQLDialect
2015-11-24 16:23:21,06115-11-24 16:23:21  INFO (SettingsFactory.java:126 LINE) SettingsFactory.buildSettings -> Database ->
       name : MySQL
    version : 5.6.21-log
      major : 5
      minor : 6
2015-11-24 16:23:21,06215-11-24 16:23:21  INFO (SettingsFactory.java:132 LINE) SettingsFactory.buildSettings -> Driver ->
       name : MySQL Connector Java
    version : mysql-connector-java-5.1.25 ( Revision: ${bzr.revision-id} )
      major : 5
      minor : 1
2015-11-24 16:23:21,06615-11-24 16:23:21  INFO (TransactionFactoryFactory.java:65 LINE) TransactionFactoryFactory.buildTransactionFactory -> Transaction strategy: org.springframework.orm.hibernate3.SpringTransactionFactory
2015-11-24 16:23:21,06915-11-24 16:23:21  INFO (TransactionManagerLookupFactory.java:83 LINE) TransactionManagerLookupFactory.getTransactionManagerLookup -> No TransactionManagerLookup configured (in JTA environment, use of read-write or transactional second-level cache is not recommended)
2015-11-24 16:23:21,07015-11-24 16:23:21  INFO (SettingsFactory.java:179 LINE) SettingsFactory.buildSettings -> Automatic flush during beforeCompletion(): disabled
2015-11-24 16:23:21,07015-11-24 16:23:21  INFO (SettingsFactory.java:183 LINE) SettingsFactory.buildSettings -> Automatic session close at end of transaction: disabled
2015-11-24 16:23:21,07115-11-24 16:23:21  INFO (SettingsFactory.java:190 LINE) SettingsFactory.buildSettings -> JDBC batch size: 25
2015-11-24 16:23:21,07315-11-24 16:23:21  INFO (SettingsFactory.java:193 LINE) SettingsFactory.buildSettings -> JDBC batch updates for versioned data: disabled
2015-11-24 16:23:21,07415-11-24 16:23:21  INFO (SettingsFactory.java:198 LINE) SettingsFactory.buildSettings -> Scrollable result sets: enabled
2015-11-24 16:23:21,07515-11-24 16:23:21 DEBUG (SettingsFactory.java:202 LINE) SettingsFactory.buildSettings -> Wrap result sets: disabled
2015-11-24 16:23:21,07515-11-24 16:23:21  INFO (SettingsFactory.java:206 LINE) SettingsFactory.buildSettings -> JDBC3 getGeneratedKeys(): enabled
2015-11-24 16:23:21,07515-11-24 16:23:21  INFO (SettingsFactory.java:210 LINE) SettingsFactory.buildSettings -> JDBC result set fetch size: 50
2015-11-24 16:23:21,07515-11-24 16:23:21  INFO (SettingsFactory.java:214 LINE) SettingsFactory.buildSettings -> Connection release mode: after_transaction
2015-11-24 16:23:21,07615-11-24 16:23:21  INFO (SettingsFactory.java:238 LINE) SettingsFactory.buildSettings -> Maximum outer join fetch depth: 2
2015-11-24 16:23:21,07715-11-24 16:23:21  INFO (SettingsFactory.java:241 LINE) SettingsFactory.buildSettings -> Default batch fetch size: 1
2015-11-24 16:23:21,07715-11-24 16:23:21  INFO (SettingsFactory.java:245 LINE) SettingsFactory.buildSettings -> Generate SQL with comments: disabled
2015-11-24 16:23:21,07815-11-24 16:23:21  INFO (SettingsFactory.java:249 LINE) SettingsFactory.buildSettings -> Order SQL updates by primary key: disabled
2015-11-24 16:23:21,07815-11-24 16:23:21  INFO (SettingsFactory.java:253 LINE) SettingsFactory.buildSettings -> Order SQL inserts for batching: disabled
2015-11-24 16:23:21,07815-11-24 16:23:21  INFO (SettingsFactory.java:431 LINE) SettingsFactory.createQueryTranslatorFactory -> Query translator: org.hibernate.hql.ast.ASTQueryTranslatorFactory
2015-11-24 16:23:21,08015-11-24 16:23:21  INFO (ASTQueryTranslatorFactory.java:47 LINE) ASTQueryTranslatorFactory.<init> -> Using ASTQueryTranslatorFactory
2015-11-24 16:23:21,08115-11-24 16:23:21  INFO (SettingsFactory.java:261 LINE) SettingsFactory.buildSettings -> Query language substitutions: {false='N', true='Y'}
2015-11-24 16:23:21,08115-11-24 16:23:21  INFO (SettingsFactory.java:266 LINE) SettingsFactory.buildSettings -> JPA-QL strict compliance: disabled
2015-11-24 16:23:21,08215-11-24 16:23:21  INFO (SettingsFactory.java:271 LINE) SettingsFactory.buildSettings -> Second-level cache: enabled
2015-11-24 16:23:21,08215-11-24 16:23:21  INFO (SettingsFactory.java:275 LINE) SettingsFactory.buildSettings -> Query cache: enabled
2015-11-24 16:23:21,08415-11-24 16:23:21  INFO (SettingsFactory.java:406 LINE) SettingsFactory.createRegionFactory -> Cache region factory : org.hibernate.cache.impl.bridge.RegionFactoryCacheProviderBridge
2015-11-24 16:23:21,10715-11-24 16:23:21  INFO (RegionFactoryCacheProviderBridge.java:61 LINE) RegionFactoryCacheProviderBridge.<init> -> Cache provider: org.hibernate.cache.EhCacheProvider
2015-11-24 16:23:21,11215-11-24 16:23:21  INFO (SettingsFactory.java:285 LINE) SettingsFactory.buildSettings -> Optimize cache for minimal puts: disabled
2015-11-24 16:23:21,11215-11-24 16:23:21  INFO (SettingsFactory.java:294 LINE) SettingsFactory.buildSettings -> Structured second-level cache entries: disabled
2015-11-24 16:23:21,11315-11-24 16:23:21  INFO (SettingsFactory.java:385 LINE) SettingsFactory.createQueryCacheFactory -> Query cache factory: org.hibernate.cache.StandardQueryCacheFactory
2015-11-24 16:23:21,12015-11-24 16:23:21  INFO (SettingsFactory.java:314 LINE) SettingsFactory.buildSettings -> Echoing all SQL to stdout
2015-11-24 16:23:21,12215-11-24 16:23:21  INFO (SettingsFactory.java:323 LINE) SettingsFactory.buildSettings -> Statistics: disabled
2015-11-24 16:23:21,12215-11-24 16:23:21  INFO (SettingsFactory.java:327 LINE) SettingsFactory.buildSettings -> Deleted entity synthetic identifier rollback: disabled
2015-11-24 16:23:21,12215-11-24 16:23:21  INFO (SettingsFactory.java:343 LINE) SettingsFactory.buildSettings -> Default entity-mode: pojo
2015-11-24 16:23:21,12315-11-24 16:23:21  INFO (SettingsFactory.java:347 LINE) SettingsFactory.buildSettings -> Named query checking : enabled
2015-11-24 16:23:21,12315-11-24 16:23:21  INFO (SettingsFactory.java:351 LINE) SettingsFactory.buildSettings -> Check Nullability in Core (should be disabled when Bean Validation is on): disabled
2015-11-24 16:23:21,14715-11-24 16:23:21  INFO (SessionFactoryImpl.java:202 LINE) SessionFactoryImpl.<init> -> building session factory
2015-11-24 16:23:21,15215-11-24 16:23:21 DEBUG (SessionFactoryImpl.java:206 LINE) SessionFactoryImpl.<init> -> Statistics initialized [enabled=false]}
2015-11-24 16:23:21,15415-11-24 16:23:21 DEBUG (BasicTypeRegistry.java:147 LINE) BasicTypeRegistry.register -> Adding type registration boolean -> org.hibernate.type.BooleanType@7a89c626
2015-11-24 16:23:21,15415-11-24 16:23:21 DEBUG (BasicTypeRegistry.java:147 LINE) BasicTypeRegistry.register -> Adding type registration boolean -> org.hibernate.type.BooleanType@7a89c626
2015-11-24 16:23:21,15515-11-24 16:23:21 DEBUG (BasicTypeRegistry.java:147 LINE) BasicTypeRegistry.register -> Adding type registration java.lang.Boolean -> org.hibernate.type.BooleanType@7a89c626
2015-11-24 16:23:21,15515-11-24 16:23:21 DEBUG (BasicTypeRegistry.java:147 LINE) BasicTypeRegistry.register -> Adding type registration numeric_boolean -> org.hibernate.type.NumericBooleanType@1ffaade5
2015-11-24 16:23:21,15515-11-24 16:23:21 DEBUG (BasicTypeRegistry.java:147 LINE) BasicTypeRegistry.register -> Adding type registration true_false -> org.hibernate.type.TrueFalseType@7377b6fc
2015-11-24 16:23:21,15515-11-24 16:23:21 DEBUG (BasicTypeRegistry.java:147 LINE) BasicTypeRegistry.register -> Adding type registration yes_no -> org.hibernate.type.YesNoType@1a89ebe0
2015-11-24 16:23:21,15615-11-24 16:23:21 DEBUG (BasicTypeRegistry.java:147 LINE) BasicTypeRegistry.register -> Adding type registration byte -> org.hibernate.type.ByteType@2d14b355
2015-11-24 16:23:21,15615-11-24 16:23:21 DEBUG (BasicTypeRegistry.java:147 LINE) BasicTypeRegistry.register -> Adding type registration byte -> org.hibernate.type.ByteType@2d14b355
2015-11-24 16:23:21,15615-11-24 16:23:21 DEBUG (BasicTypeRegistry.java:147 LINE) BasicTypeRegistry.register -> Adding type registration java.lang.Byte -> org.hibernate.type.ByteType@2d14b355
2015-11-24 16:23:21,15615-11-24 16:23:21 DEBUG (BasicTypeRegistry.java:147 LINE) BasicTypeRegistry.register -> Adding type registration character -> org.hibernate.type.CharacterType@2008473d
2015-11-24 16:23:21,15615-11-24 16:23:21 DEBUG (BasicTypeRegistry.java:147 LINE) BasicTypeRegistry.register -> Adding type registration char -> org.hibernate.type.CharacterType@2008473d
2015-11-24 16:23:21,15715-11-24 16:23:21 DEBUG (BasicTypeRegistry.java:147 LINE) BasicTypeRegistry.register -> Adding type registration java.lang.Character -> org.hibernate.type.CharacterType@2008473d
2015-11-24 16:23:21,15715-11-24 16:23:21 DEBUG (BasicTypeRegistry.java:147 LINE) BasicTypeRegistry.register -> Adding type registration short -> org.hibernate.type.ShortType@13d982e4
2015-11-24 16:23:21,15715-11-24 16:23:21 DEBUG (BasicTypeRegistry.java:147 LINE) BasicTypeRegistry.register -> Adding type registration short -> org.hibernate.type.ShortType@13d982e4
2015-11-24 16:23:21,15715-11-24 16:23:21 DEBUG (BasicTypeRegistry.java:147 LINE) BasicTypeRegistry.register -> Adding type registration java.lang.Short -> org.hibernate.type.ShortType@13d982e4
2015-11-24 16:23:21,15815-11-24 16:23:21 DEBUG (BasicTypeRegistry.java:147 LINE) BasicTypeRegistry.register -> Adding type registration integer -> org.hibernate.type.IntegerType@5a61b819
2015-11-24 16:23:21,15815-11-24 16:23:21 DEBUG (BasicTypeRegistry.java:147 LINE) BasicTypeRegistry.register -> Adding type registration int -> org.hibernate.type.IntegerType@5a61b819
2015-11-24 16:23:21,15915-11-24 16:23:21 DEBUG (BasicTypeRegistry.java:147 LINE) BasicTypeRegistry.register -> Adding type registration java.lang.Integer -> org.hibernate.type.IntegerType@5a61b819
2015-11-24 16:23:21,15915-11-24 16:23:21 DEBUG (BasicTypeRegistry.java:147 LINE) BasicTypeRegistry.register -> Adding type registration long -> org.hibernate.type.LongType@b2c6b61
2015-11-24 16:23:21,15915-11-24 16:23:21 DEBUG (BasicTypeRegistry.java:147 LINE) BasicTypeRegistry.register -> Adding type registration long -> org.hibernate.type.LongType@b2c6b61
2015-11-24 16:23:21,15915-11-24 16:23:21 DEBUG (BasicTypeRegistry.java:147 LINE) BasicTypeRegistry.register -> Adding type registration java.lang.Long -> org.hibernate.type.LongType@b2c6b61
2015-11-24 16:23:21,16015-11-24 16:23:21 DEBUG (BasicTypeRegistry.java:147 LINE) BasicTypeRegistry.register -> Adding type registration float -> org.hibernate.type.FloatType@1c08114a
2015-11-24 16:23:21,16015-11-24 16:23:21 DEBUG (BasicTypeRegistry.java:147 LINE) BasicTypeRegistry.register -> Adding type registration float -> org.hibernate.type.FloatType@1c08114a
2015-11-24 16:23:21,16115-11-24 16:23:21 DEBUG (BasicTypeRegistry.java:147 LINE) BasicTypeRegistry.register -> Adding type registration java.lang.Float -> org.hibernate.type.FloatType@1c08114a
2015-11-24 16:23:21,16215-11-24 16:23:21 DEBUG (BasicTypeRegistry.java:147 LINE) BasicTypeRegistry.register -> Adding type registration double -> org.hibernate.type.DoubleType@5bb48c07
2015-11-24 16:23:21,16215-11-24 16:23:21 DEBUG (BasicTypeRegistry.java:147 LINE) BasicTypeRegistry.register -> Adding type registration double -> org.hibernate.type.DoubleType@5bb48c07
2015-11-24 16:23:21,16315-11-24 16:23:21 DEBUG (BasicTypeRegistry.java:147 LINE) BasicTypeRegistry.register -> Adding type registration java.lang.Double -> org.hibernate.type.DoubleType@5bb48c07
2015-11-24 16:23:21,16315-11-24 16:23:21 DEBUG (BasicTypeRegistry.java:147 LINE) BasicTypeRegistry.register -> Adding type registration big_decimal -> org.hibernate.type.BigDecimalType@14b89cc2
2015-11-24 16:23:21,16315-11-24 16:23:21 DEBUG (BasicTypeRegistry.java:147 LINE) BasicTypeRegistry.register -> Adding type registration java.math.BigDecimal -> org.hibernate.type.BigDecimalType@14b89cc2
2015-11-24 16:23:21,16315-11-24 16:23:21 DEBUG (BasicTypeRegistry.java:147 LINE) BasicTypeRegistry.register -> Adding type registration big_integer -> org.hibernate.type.BigIntegerType@f3080df
2015-11-24 16:23:21,16415-11-24 16:23:21 DEBUG (BasicTypeRegistry.java:147 LINE) BasicTypeRegistry.register -> Adding type registration java.math.BigInteger -> org.hibernate.type.BigIntegerType@f3080df
2015-11-24 16:23:21,16415-11-24 16:23:21 DEBUG (BasicTypeRegistry.java:147 LINE) BasicTypeRegistry.register -> Adding type registration string -> org.hibernate.type.StringType@4564886c
2015-11-24 16:23:21,16415-11-24 16:23:21 DEBUG (BasicTypeRegistry.java:147 LINE) BasicTypeRegistry.register -> Adding type registration java.lang.String -> org.hibernate.type.StringType@4564886c
2015-11-24 16:23:21,16415-11-24 16:23:21 DEBUG (BasicTypeRegistry.java:147 LINE) BasicTypeRegistry.register -> Adding type registration url -> org.hibernate.type.UrlType@6d293c5e
2015-11-24 16:23:21,16415-11-24 16:23:21 DEBUG (BasicTypeRegistry.java:147 LINE) BasicTypeRegistry.register -> Adding type registration java.net.URL -> org.hibernate.type.UrlType@6d293c5e
2015-11-24 16:23:21,16415-11-24 16:23:21 DEBUG (BasicTypeRegistry.java:147 LINE) BasicTypeRegistry.register -> Adding type registration date -> org.hibernate.type.DateType@405d65c3
2015-11-24 16:23:21,16515-11-24 16:23:21 DEBUG (BasicTypeRegistry.java:147 LINE) BasicTypeRegistry.register -> Adding type registration java.sql.Date -> org.hibernate.type.DateType@405d65c3
2015-11-24 16:23:21,16515-11-24 16:23:21 DEBUG (BasicTypeRegistry.java:147 LINE) BasicTypeRegistry.register -> Adding type registration time -> org.hibernate.type.TimeType@297d1d8b
2015-11-24 16:23:21,16515-11-24 16:23:21 DEBUG (BasicTypeRegistry.java:147 LINE) BasicTypeRegistry.register -> Adding type registration java.sql.Time -> org.hibernate.type.TimeType@297d1d8b
2015-11-24 16:23:21,16615-11-24 16:23:21 DEBUG (BasicTypeRegistry.java:147 LINE) BasicTypeRegistry.register -> Adding type registration timestamp -> org.hibernate.type.TimestampType@121812f9
2015-11-24 16:23:21,16615-11-24 16:23:21 DEBUG (BasicTypeRegistry.java:147 LINE) BasicTypeRegistry.register -> Adding type registration java.sql.Timestamp -> org.hibernate.type.TimestampType@121812f9
2015-11-24 16:23:21,16615-11-24 16:23:21 DEBUG (BasicTypeRegistry.java:147 LINE) BasicTypeRegistry.register -> Adding type registration java.util.Date -> org.hibernate.type.TimestampType@121812f9
2015-11-24 16:23:21,17515-11-24 16:23:21 DEBUG (BasicTypeRegistry.java:147 LINE) BasicTypeRegistry.register -> Adding type registration dbtimestamp -> org.hibernate.type.DbTimestampType@6221a993
2015-11-24 16:23:21,17615-11-24 16:23:21 DEBUG (BasicTypeRegistry.java:147 LINE) BasicTypeRegistry.register -> Adding type registration calendar -> org.hibernate.type.CalendarType@7a171efb
2015-11-24 16:23:21,17615-11-24 16:23:21 DEBUG (BasicTypeRegistry.java:147 LINE) BasicTypeRegistry.register -> Adding type registration java.util.Calendar -> org.hibernate.type.CalendarType@7a171efb
2015-11-24 16:23:21,17615-11-24 16:23:21 DEBUG (BasicTypeRegistry.java:147 LINE) BasicTypeRegistry.register -> Adding type registration java.util.GregorianCalendar -> org.hibernate.type.CalendarType@7a171efb
2015-11-24 16:23:21,17715-11-24 16:23:21 DEBUG (BasicTypeRegistry.java:147 LINE) BasicTypeRegistry.register -> Adding type registration calendar_date -> org.hibernate.type.CalendarDateType@1ab50384
2015-11-24 16:23:21,17715-11-24 16:23:21 DEBUG (BasicTypeRegistry.java:147 LINE) BasicTypeRegistry.register -> Adding type registration locale -> org.hibernate.type.LocaleType@56c3b8b6
2015-11-24 16:23:21,17815-11-24 16:23:21 DEBUG (BasicTypeRegistry.java:147 LINE) BasicTypeRegistry.register -> Adding type registration java.util.Locale -> org.hibernate.type.LocaleType@56c3b8b6
2015-11-24 16:23:21,17815-11-24 16:23:21 DEBUG (BasicTypeRegistry.java:147 LINE) BasicTypeRegistry.register -> Adding type registration currency -> org.hibernate.type.CurrencyType@6ce18074
2015-11-24 16:23:21,17815-11-24 16:23:21 DEBUG (BasicTypeRegistry.java:147 LINE) BasicTypeRegistry.register -> Adding type registration java.util.Currency -> org.hibernate.type.CurrencyType@6ce18074
2015-11-24 16:23:21,17815-11-24 16:23:21 DEBUG (BasicTypeRegistry.java:147 LINE) BasicTypeRegistry.register -> Adding type registration timezone -> org.hibernate.type.TimeZoneType@3b73c65e
2015-11-24 16:23:21,17815-11-24 16:23:21 DEBUG (BasicTypeRegistry.java:147 LINE) BasicTypeRegistry.register -> Adding type registration java.util.TimeZone -> org.hibernate.type.TimeZoneType@3b73c65e
2015-11-24 16:23:21,17915-11-24 16:23:21 DEBUG (BasicTypeRegistry.java:147 LINE) BasicTypeRegistry.register -> Adding type registration class -> org.hibernate.type.ClassType@6f7e20ff
2015-11-24 16:23:21,17915-11-24 16:23:21 DEBUG (BasicTypeRegistry.java:147 LINE) BasicTypeRegistry.register -> Adding type registration java.lang.Class -> org.hibernate.type.ClassType@6f7e20ff
2015-11-24 16:23:21,17915-11-24 16:23:21 DEBUG (BasicTypeRegistry.java:147 LINE) BasicTypeRegistry.register -> Adding type registration uuid-binary -> org.hibernate.type.UUIDBinaryType@38430e80
2015-11-24 16:23:21,17915-11-24 16:23:21 DEBUG (BasicTypeRegistry.java:147 LINE) BasicTypeRegistry.register -> Adding type registration java.util.UUID -> org.hibernate.type.UUIDBinaryType@38430e80
2015-11-24 16:23:21,18015-11-24 16:23:21 DEBUG (BasicTypeRegistry.java:147 LINE) BasicTypeRegistry.register -> Adding type registration uuid-char -> org.hibernate.type.UUIDCharType@75c4d215
2015-11-24 16:23:21,18115-11-24 16:23:21 DEBUG (BasicTypeRegistry.java:147 LINE) BasicTypeRegistry.register -> Adding type registration pg-uuid -> org.hibernate.type.PostgresUUIDType@23e5fd87
2015-11-24 16:23:21,18115-11-24 16:23:21 DEBUG (BasicTypeRegistry.java:147 LINE) BasicTypeRegistry.register -> Adding type registration binary -> org.hibernate.type.BinaryType@3b34f473
2015-11-24 16:23:21,18115-11-24 16:23:21 DEBUG (BasicTypeRegistry.java:147 LINE) BasicTypeRegistry.register -> Adding type registration byte[] -> org.hibernate.type.BinaryType@3b34f473
2015-11-24 16:23:21,18115-11-24 16:23:21 DEBUG (BasicTypeRegistry.java:147 LINE) BasicTypeRegistry.register -> Adding type registration [B -> org.hibernate.type.BinaryType@3b34f473
2015-11-24 16:23:21,18215-11-24 16:23:21 DEBUG (BasicTypeRegistry.java:147 LINE) BasicTypeRegistry.register -> Adding type registration wrapper-binary -> org.hibernate.type.WrapperBinaryType@4be271de
2015-11-24 16:23:21,18215-11-24 16:23:21 DEBUG (BasicTypeRegistry.java:147 LINE) BasicTypeRegistry.register -> Adding type registration Byte[] -> org.hibernate.type.WrapperBinaryType@4be271de
2015-11-24 16:23:21,18215-11-24 16:23:21 DEBUG (BasicTypeRegistry.java:147 LINE) BasicTypeRegistry.register -> Adding type registration [Ljava.lang.Byte; -> org.hibernate.type.WrapperBinaryType@4be271de
2015-11-24 16:23:21,18215-11-24 16:23:21 DEBUG (BasicTypeRegistry.java:147 LINE) BasicTypeRegistry.register -> Adding type registration image -> org.hibernate.type.ImageType@663d80c9
2015-11-24 16:23:21,18315-11-24 16:23:21 DEBUG (BasicTypeRegistry.java:147 LINE) BasicTypeRegistry.register -> Adding type registration characters -> org.hibernate.type.CharArrayType@18f9a7a8
2015-11-24 16:23:21,21515-11-24 16:23:21 DEBUG (BasicTypeRegistry.java:147 LINE) BasicTypeRegistry.register -> Adding type registration char[] -> org.hibernate.type.CharArrayType@18f9a7a8
2015-11-24 16:23:21,21515-11-24 16:23:21 DEBUG (BasicTypeRegistry.java:147 LINE) BasicTypeRegistry.register -> Adding type registration [C -> org.hibernate.type.CharArrayType@18f9a7a8
2015-11-24 16:23:21,21615-11-24 16:23:21 DEBUG (BasicTypeRegistry.java:147 LINE) BasicTypeRegistry.register -> Adding type registration wrapper-characters -> org.hibernate.type.CharacterArrayType@a8a8b1e
2015-11-24 16:23:21,21615-11-24 16:23:21 DEBUG (BasicTypeRegistry.java:147 LINE) BasicTypeRegistry.register -> Adding type registration [Ljava.lang.Character; -> org.hibernate.type.CharacterArrayType@a8a8b1e
2015-11-24 16:23:21,21715-11-24 16:23:21 DEBUG (BasicTypeRegistry.java:147 LINE) BasicTypeRegistry.register -> Adding type registration Character[] -> org.hibernate.type.CharacterArrayType@a8a8b1e
2015-11-24 16:23:21,21715-11-24 16:23:21 DEBUG (BasicTypeRegistry.java:147 LINE) BasicTypeRegistry.register -> Adding type registration text -> org.hibernate.type.TextType@70ea9f38
2015-11-24 16:23:21,21715-11-24 16:23:21 DEBUG (BasicTypeRegistry.java:147 LINE) BasicTypeRegistry.register -> Adding type registration blob -> org.hibernate.type.BlobType@597e9be9
2015-11-24 16:23:21,21715-11-24 16:23:21 DEBUG (BasicTypeRegistry.java:147 LINE) BasicTypeRegistry.register -> Adding type registration java.sql.Blob -> org.hibernate.type.BlobType@597e9be9
2015-11-24 16:23:21,21815-11-24 16:23:21 DEBUG (BasicTypeRegistry.java:147 LINE) BasicTypeRegistry.register -> Adding type registration materialized_blob -> org.hibernate.type.MaterializedBlobType@3948166e
2015-11-24 16:23:21,21815-11-24 16:23:21 DEBUG (BasicTypeRegistry.java:147 LINE) BasicTypeRegistry.register -> Adding type registration wrapper_materialized_blob -> org.hibernate.type.WrappedMaterializedBlobType@1f4f53dd
2015-11-24 16:23:21,21815-11-24 16:23:21 DEBUG (BasicTypeRegistry.java:147 LINE) BasicTypeRegistry.register -> Adding type registration clob -> org.hibernate.type.ClobType@36162346
2015-11-24 16:23:21,21915-11-24 16:23:21 DEBUG (BasicTypeRegistry.java:147 LINE) BasicTypeRegistry.register -> Adding type registration java.sql.Clob -> org.hibernate.type.ClobType@36162346
2015-11-24 16:23:21,21915-11-24 16:23:21 DEBUG (BasicTypeRegistry.java:147 LINE) BasicTypeRegistry.register -> Adding type registration materialized_clob -> org.hibernate.type.MaterializedClobType@278a1cfb
2015-11-24 16:23:21,21915-11-24 16:23:21 DEBUG (BasicTypeRegistry.java:147 LINE) BasicTypeRegistry.register -> Adding type registration wrapper_characters_clob -> org.hibernate.type.CharacterArrayClobType@6f6c1fb0
2015-11-24 16:23:21,21915-11-24 16:23:21 DEBUG (BasicTypeRegistry.java:147 LINE) BasicTypeRegistry.register -> Adding type registration characters_clob -> org.hibernate.type.PrimitiveCharacterArrayClobType@1e78a60e
2015-11-24 16:23:21,22015-11-24 16:23:21 DEBUG (BasicTypeRegistry.java:147 LINE) BasicTypeRegistry.register -> Adding type registration serializable -> org.hibernate.type.SerializableType@5c9c2f98
2015-11-24 16:23:21,22115-11-24 16:23:21 DEBUG (BasicTypeRegistry.java:147 LINE) BasicTypeRegistry.register -> Adding type registration object -> org.hibernate.type.ObjectType@76f294c5
2015-11-24 16:23:21,22115-11-24 16:23:21 DEBUG (BasicTypeRegistry.java:147 LINE) BasicTypeRegistry.register -> Adding type registration java.lang.Object -> org.hibernate.type.ObjectType@76f294c5
2015-11-24 16:23:21,22115-11-24 16:23:21 DEBUG (BasicTypeRegistry.java:147 LINE) BasicTypeRegistry.register -> Adding type registration imm_date -> org.hibernate.type.AdaptedImmutableType@79d3cc95
2015-11-24 16:23:21,22215-11-24 16:23:21 DEBUG (BasicTypeRegistry.java:147 LINE) BasicTypeRegistry.register -> Adding type registration imm_time -> org.hibernate.type.AdaptedImmutableType@401c88af
2015-11-24 16:23:21,22215-11-24 16:23:21 DEBUG (BasicTypeRegistry.java:147 LINE) BasicTypeRegistry.register -> Adding type registration imm_timestamp -> org.hibernate.type.AdaptedImmutableType@1151ba0b
2015-11-24 16:23:21,22215-11-24 16:23:21 DEBUG (BasicTypeRegistry.java:147 LINE) BasicTypeRegistry.register -> Adding type registration imm_dbtimestamp -> org.hibernate.type.AdaptedImmutableType@c8d310f
2015-11-24 16:23:21,22315-11-24 16:23:21 DEBUG (BasicTypeRegistry.java:147 LINE) BasicTypeRegistry.register -> Adding type registration imm_calendar -> org.hibernate.type.AdaptedImmutableType@98fd639
2015-11-24 16:23:21,22315-11-24 16:23:21 DEBUG (BasicTypeRegistry.java:147 LINE) BasicTypeRegistry.register -> Adding type registration imm_calendar_date -> org.hibernate.type.AdaptedImmutableType@42393d16
2015-11-24 16:23:21,22315-11-24 16:23:21 DEBUG (BasicTypeRegistry.java:147 LINE) BasicTypeRegistry.register -> Adding type registration imm_binary -> org.hibernate.type.AdaptedImmutableType@3bd99151
2015-11-24 16:23:21,22815-11-24 16:23:21 DEBUG (BasicTypeRegistry.java:147 LINE) BasicTypeRegistry.register -> Adding type registration imm_serializable -> org.hibernate.type.AdaptedImmutableType@48d37b89
2015-11-24 16:23:21,22915-11-24 16:23:21 DEBUG (BasicTypeRegistry.java:147 LINE) BasicTypeRegistry.register -> Adding type registration wrapper_materialized_blob -> org.hibernate.type.WrappedMaterializedBlobType@1c237e30
2015-11-24 16:23:21,22915-11-24 16:23:21  INFO (BasicTypeRegistry.java:150 LINE) BasicTypeRegistry.register -> Type registration [wrapper_materialized_blob] overrides previous : org.hibernate.type.WrappedMaterializedBlobType@1f4f53dd
2015-11-24 16:23:21,22915-11-24 16:23:21 DEBUG (BasicTypeRegistry.java:147 LINE) BasicTypeRegistry.register -> Adding type registration clob -> org.hibernate.type.ClobType@5e318fbe
2015-11-24 16:23:21,23015-11-24 16:23:21  INFO (BasicTypeRegistry.java:150 LINE) BasicTypeRegistry.register -> Type registration [clob] overrides previous : org.hibernate.type.ClobType@36162346
2015-11-24 16:23:21,23015-11-24 16:23:21 DEBUG (BasicTypeRegistry.java:147 LINE) BasicTypeRegistry.register -> Adding type registration java.sql.Clob -> org.hibernate.type.ClobType@5e318fbe
2015-11-24 16:23:21,23015-11-24 16:23:21  INFO (BasicTypeRegistry.java:150 LINE) BasicTypeRegistry.register -> Type registration [java.sql.Clob] overrides previous : org.hibernate.type.ClobType@36162346
2015-11-24 16:23:21,23115-11-24 16:23:21 DEBUG (BasicTypeRegistry.java:147 LINE) BasicTypeRegistry.register -> Adding type registration wrapper_characters_clob -> org.hibernate.type.CharacterArrayClobType@7c713611
2015-11-24 16:23:21,23115-11-24 16:23:21  INFO (BasicTypeRegistry.java:150 LINE) BasicTypeRegistry.register -> Type registration [wrapper_characters_clob] overrides previous : org.hibernate.type.CharacterArrayClobType@6f6c1fb0
2015-11-24 16:23:21,23215-11-24 16:23:21 DEBUG (BasicTypeRegistry.java:147 LINE) BasicTypeRegistry.register -> Adding type registration materialized_clob -> org.hibernate.type.MaterializedClobType@7d43342
2015-11-24 16:23:21,23215-11-24 16:23:21  INFO (BasicTypeRegistry.java:150 LINE) BasicTypeRegistry.register -> Type registration [materialized_clob] overrides previous : org.hibernate.type.MaterializedClobType@278a1cfb
2015-11-24 16:23:21,23215-11-24 16:23:21 DEBUG (BasicTypeRegistry.java:147 LINE) BasicTypeRegistry.register -> Adding type registration characters_clob -> org.hibernate.type.PrimitiveCharacterArrayClobType@6c94d5ea
2015-11-24 16:23:21,23315-11-24 16:23:21  INFO (BasicTypeRegistry.java:150 LINE) BasicTypeRegistry.register -> Type registration [characters_clob] overrides previous : org.hibernate.type.PrimitiveCharacterArrayClobType@1e78a60e
2015-11-24 16:23:21,23315-11-24 16:23:21 DEBUG (BasicTypeRegistry.java:147 LINE) BasicTypeRegistry.register -> Adding type registration materialized_blob -> org.hibernate.type.MaterializedBlobType@37eec280
2015-11-24 16:23:21,23315-11-24 16:23:21  INFO (BasicTypeRegistry.java:150 LINE) BasicTypeRegistry.register -> Type registration [materialized_blob] overrides previous : org.hibernate.type.MaterializedBlobType@3948166e
2015-11-24 16:23:21,23415-11-24 16:23:21 DEBUG (BasicTypeRegistry.java:147 LINE) BasicTypeRegistry.register -> Adding type registration blob -> org.hibernate.type.BlobType@33eda8f2
2015-11-24 16:23:21,23415-11-24 16:23:21  INFO (BasicTypeRegistry.java:150 LINE) BasicTypeRegistry.register -> Type registration [blob] overrides previous : org.hibernate.type.BlobType@597e9be9
2015-11-24 16:23:21,23415-11-24 16:23:21 DEBUG (BasicTypeRegistry.java:147 LINE) BasicTypeRegistry.register -> Adding type registration java.sql.Blob -> org.hibernate.type.BlobType@33eda8f2
2015-11-24 16:23:21,23415-11-24 16:23:21  INFO (BasicTypeRegistry.java:150 LINE) BasicTypeRegistry.register -> Type registration [java.sql.Blob] overrides previous : org.hibernate.type.BlobType@597e9be9
2015-11-24 16:23:21,23615-11-24 16:23:21 DEBUG (SessionFactoryImpl.java:228 LINE) SessionFactoryImpl.<init> -> Session factory constructed with filter configurations : {}
2015-11-24 16:23:21,23715-11-24 16:23:21 DEBUG (SessionFactoryImpl.java:232 LINE) SessionFactoryImpl.<init> -> instantiating session factory with properties: {java.runtime.name=Java(TM) SE Runtime Environment, hibernate.cache.provider_class=org.hibernate.cache.EhCacheProvider, sun.boot.library.path=E:\JDK1.7\bin, java.vm.version=23.7-b01, java.vm.vendor=Oracle Corporation, java.vendor.url=http://java.oracle.com/, path.separator=;, hibernate.cache.use_query_cache=true, java.vm.name=Java HotSpot(TM) 64-Bit Server VM, file.encoding.pkg=sun.io, user.script=, user.country=CN, sun.java.launcher=SUN_STANDARD, sun.os.patch.level=, java.vm.specification.name=Java Virtual Machine Specification, user.dir=G:\workspace\mobile-user, java.runtime.version=1.7.0_17-b02, java.awt.graphicsenv=sun.awt.Win32GraphicsEnvironment, hibernate.current_session_context_class=org.springframework.orm.hibernate3.SpringSessionContext, java.endorsed.dirs=E:\JDK1.7\lib\endorsed, os.arch=amd64, hibernate.check_nullability=false, java.io.tmpdir=C:\Users\gqy\AppData\Local\Temp\, line.separator=
, java.vm.specification.vendor=Oracle Corporation, user.variant=, os.name=Windows 8, hibernate.cache.use_second_level_cache=true, sun.jnu.encoding=GBK, hibernate.jdbc.fetch_size=50, java.library.path=E:\JDK1.7\bin;C:\WINDOWS\Sun\Java\bin;C:\WINDOWS\system32;C:\WINDOWS;C:\Program Files (x86)\NVIDIA Corporation\PhysX\Common;C:\Program Files (x86)\Intel\iCLS Client\;C:\Program Files\Intel\iCLS Client\;C:\WINDOWS\system32;C:\WINDOWS;C:\WINDOWS\System32\Wbem;C:\WINDOWS\System32\WindowsPowerShell\v1.0\;C:\Program Files\Intel\Intel(R) Management Engine Components\DAL;C:\Program Files\Intel\Intel(R) Management Engine Components\IPT;C:\Program Files (x86)\Intel\Intel(R) Management Engine Components\DAL;C:\Program Files (x86)\Intel\Intel(R) Management Engine Components\IPT;C:\Program Files (x86)\Intel\OpenCL SDK\3.0\bin\x86;C:\Program Files (x86)\Intel\OpenCL SDK\3.0\bin\x64;C:\ProgramData\Lenovo\ReadyApps;E:\JDK\bin;E:\JDK\jre\bin;E:\Go\bin;E:\winscp\WinSCP\;E:\maven\apache-maven-3.2.3\bin;C:\Program Files (x86)\DBank\ClickUp;C:\Program Files (x86)\DBank\ClickUp;., java.specification.name=Java Platform API Specification, java.class.version=51.0, sun.management.compiler=HotSpot 64-Bit Tiered Compilers, hibernate.transaction.factory_class=org.springframework.orm.hibernate3.SpringTransactionFactory, os.version=6.2, user.home=C:\Users\gqy, user.timezone=Asia/Shanghai, java.awt.printerjob=sun.awt.windows.WPrinterJob, hibernate.connection.release_mode=after_transaction, java.specification.version=1.7, file.encoding=UTF-8, hibernate.format_sql=true, user.name=gqy, java.class.path=G:\workspace\mobile-user\target\test-classes;G:\workspace\mobile-user\target\classes;H:\Respositories2\repository\com\alibaba\fastjson\1.2.4\fastjson-1.2.4.jar;H:\Respositories2\repository\com\google\zxing\core\3.0.0\core-3.0.0.jar;H:\Respositories2\repository\com\google\zxing\javase\3.0.0\javase-3.0.0.jar;H:\Respositories2\repository\io\netty\netty\4.0.0.Alpha8\netty-4.0.0.Alpha8.jar;H:\Respositories2\repository\jstl\jstl\1.2\jstl-1.2.jar;H:\Respositories2\repository\org\springframework\spring-aop\3.2.0.RELEASE\spring-aop-3.2.0.RELEASE.jar;H:\Respositories2\repository\aopalliance\aopalliance\1.0\aopalliance-1.0.jar;H:\Respositories2\repository\org\springframework\spring-beans\3.2.0.RELEASE\spring-beans-3.2.0.RELEASE.jar;H:\Respositories2\repository\org\springframework\spring-context\3.2.0.RELEASE\spring-context-3.2.0.RELEASE.jar;H:\Respositories2\repository\org\springframework\spring-expression\3.2.0.RELEASE\spring-expression-3.2.0.RELEASE.jar;H:\Respositories2\repository\org\springframework\spring-context-support\3.2.0.RELEASE\spring-context-support-3.2.0.RELEASE.jar;H:\Respositories2\repository\org\springframework\spring-core\3.2.0.RELEASE\spring-core-3.2.0.RELEASE.jar;H:\Respositories2\repository\commons-logging\commons-logging\1.1.1\commons-logging-1.1.1.jar;H:\Respositories2\repository\org\springframework\spring-jdbc\3.2.0.RELEASE\spring-jdbc-3.2.0.RELEASE.jar;H:\Respositories2\repository\org\springframework\spring-orm\3.2.0.RELEASE\spring-orm-3.2.0.RELEASE.jar;H:\Respositories2\repository\org\springframework\spring-tx\3.2.0.RELEASE\spring-tx-3.2.0.RELEASE.jar;H:\Respositories2\repository\org\springframework\spring-web\3.2.0.RELEASE\spring-web-3.2.0.RELEASE.jar;H:\Respositories2\repository\org\springframework\spring-webmvc\3.2.0.RELEASE\spring-webmvc-3.2.0.RELEASE.jar;H:\Respositories2\repository\org\springframework\amqp\spring-amqp\1.2.0.RELEASE\spring-amqp-1.2.0.RELEASE.jar;H:\Respositories2\repository\org\aspectj\aspectjrt\1.7.0\aspectjrt-1.7.0.jar;H:\Respositories2\repository\com\fasterxml\jackson\core\jackson-core\2.1.0\jackson-core-2.1.0.jar;H:\Respositories2\repository\org\codehaus\jackson\jackson-mapper-asl\1.9.13\jackson-mapper-asl-1.9.13.jar;H:\Respositories2\repository\org\codehaus\jackson\jackson-core-asl\1.9.13\jackson-core-asl-1.9.13.jar;H:\Respositories2\repository\org\codehaus\jackson\jackson-jaxrs\1.9.13\jackson-jaxrs-1.9.13.jar;H:\Respositories2\repository\org\codehaus\jackson\jackson-xc\1.9.13\jackson-xc-1.9.13.jar;H:\Respositories2\repository\commons-fileupload\commons-fileupload\1.3\commons-fileupload-1.3.jar;H:\Respositories2\repository\commons-io\commons-io\2.2\commons-io-2.2.jar;H:\Respositories2\repository\mysql\mysql-connector-java\5.1.25\mysql-connector-java-5.1.25.jar;H:\Respositories2\repository\commons-dbcp\commons-dbcp\1.4\commons-dbcp-1.4.jar;H:\Respositories2\repository\commons-pool\commons-pool\1.5.4\commons-pool-1.5.4.jar;H:\Respositories2\repository\org\aspectj\aspectjweaver\1.6.4\aspectjweaver-1.6.4.jar;H:\Respositories2\repository\net\sf\json-lib\json-lib\2.4\json-lib-2.4-jdk15.jar;H:\Respositories2\repository\commons-collections\commons-collections\3.2.1\commons-collections-3.2.1.jar;H:\Respositories2\repository\commons-beanutils\commons-beanutils\1.9.0\commons-beanutils-1.9.0.jar;H:\Respositories2\repository\commons-lang\commons-lang\2.5\commons-lang-2.5.jar;H:\Respositories2\repository\net\sf\ezmorph\ezmorph\1.0.6\ezmorph-1.0.6.jar;H:\Respositories2\repository\org\jsoup\jsoup\1.7.3\jsoup-1.7.3.jar;H:\Respositories2\repository\javax\servlet\javax.servlet-api\3.0.1\javax.servlet-api-3.0.1.jar;H:\Respositories2\repository\org\mybatis\mybatis-spring\1.2.0\mybatis-spring-1.2.0.jar;H:\Respositories2\repository\org\mybatis\mybatis\3.2.7\mybatis-3.2.7.jar;H:\Respositories2\repository\c3p0\c3p0\0.9.1.2\c3p0-0.9.1.2.jar;H:\Respositories2\repository\org\json\json\20090211\json-20090211.jar;H:\Respositories2\repository\org\codehaus\jackson\jackson-core-lgpl\1.8.1\jackson-core-lgpl-1.8.1.jar;H:\Respositories2\repository\org\codehaus\jackson\jackson-mapper-lgpl\1.8.1\jackson-mapper-lgpl-1.8.1.jar;H:\Respositories2\repository\org\freemarker\freemarker\2.3.16\freemarker-2.3.16.jar;H:\Respositories2\repository\opensymphony\sitemesh\2.4.2\sitemesh-2.4.2.jar;H:\Respositories2\repository\org\testng\testng\5.9\testng-5.9-jdk15.jar;H:\Respositories2\repository\junit\junit\4.7\junit-4.7.jar;H:\Respositories2\repository\cglib\cglib-asm\1.0\cglib-asm-1.0.jar;H:\Respositories2\repository\net\sf\jxls\jxls-core\1.0\jxls-core-1.0.jar;H:\Respositories2\repository\commons-digester\commons-digester\2.0\commons-digester-2.0.jar;H:\Respositories2\repository\org\apache\commons\commons-jexl\2.0.1\commons-jexl-2.0.1.jar;H:\Respositories2\repository\org\apache\poi\poi-ooxml\3.7\poi-ooxml-3.7.jar;H:\Respositories2\repository\org\apache\poi\poi-ooxml-schemas\3.7\poi-ooxml-schemas-3.7.jar;H:\Respositories2\repository\org\apache\xmlbeans\xmlbeans\2.3.0\xmlbeans-2.3.0.jar;H:\Respositories2\repository\stax\stax-api\1.0.1\stax-api-1.0.1.jar;H:\Respositories2\repository\org\apache\geronimo\specs\geronimo-stax-api_1.0_spec\1.0\geronimo-stax-api_1.0_spec-1.0.jar;H:\Respositories2\repository\net\sf\jxls\jxls-reader\1.0\jxls-reader-1.0.jar;H:\Respositories2\repository\com\caucho\hessian\4.0.38\hessian-4.0.38.jar;H:\Respositories2\repository\org\apache\httpcomponents\httpcore\4.3.2\httpcore-4.3.2.jar;H:\Respositories2\repository\org\apache\httpcomponents\httpclient\4.3.2\httpclient-4.3.2.jar;H:\Respositories2\repository\org\apache\httpcomponents\httpclient-cache\4.3.2\httpclient-cache-4.3.2.jar;H:\Respositories2\repository\org\apache\httpcomponents\httpmime\4.3.2\httpmime-4.3.2.jar;H:\Respositories2\repository\org\quartz-scheduler\quartz\1.8.6\quartz-1.8.6.jar;H:\Respositories2\repository\org\slf4j\slf4j-log4j12\1.6.1\slf4j-log4j12-1.6.1.jar;H:\Respositories2\repository\org\slf4j\slf4j-api\1.6.1\slf4j-api-1.6.1.jar;H:\Respositories2\repository\log4j\log4j\1.2.16\log4j-1.2.16.jar;H:\Respositories2\repository\net\coobird\thumbnailator\0.4.7\thumbnailator-0.4.7.jar;H:\Respositories2\repository\jcifs\jcifs\1.3.17\jcifs-1.3.17.jar;H:\Respositories2\repository\org\apache\poi\poi\3.10.1\poi-3.10.1.jar;H:\Respositories2\repository\dom4j\dom4j\1.6.1\dom4j-1.6.1.jar;H:\Respositories2\repository\xml-apis\xml-apis\1.0.b2\xml-apis-1.0.b2.jar;H:\Respositories2\repository\javax\servlet\jsp\jsp-api\2.2\jsp-api-2.2.jar;H:\Respositories2\repository\jaxen\jaxen\1.1.6\jaxen-1.1.6.jar;H:\Respositories2\repository\commons-httpclient\commons-httpclient\3.0.1\commons-httpclient-3.0.1.jar;H:\Respositories2\repository\commons-codec\commons-codec\1.9\commons-codec-1.9.jar;H:\Respositories2\repository\net\sf\supercsv\super-csv\2.2.0\super-csv-2.2.0.jar;H:\Respositories2\repository\org\bouncycastle\bcprov-jdk16\1.45\bcprov-jdk16-1.45.jar;H:\Respositories2\repository\jdom\jdom\1.0\jdom-1.0.jar;H:\Respositories2\repository\com\belerweb\pinyin4j\2.5.0\pinyin4j-2.5.0.jar;H:\Respositories2\repository\org\glassfish\jersey\ext\jersey-spring3\2.4.1\jersey-spring3-2.4.1.jar;H:\Respositories2\repository\org\glassfish\jersey\core\jersey-server\2.4.1\jersey-server-2.4.1.jar;H:\Respositories2\repository\com\google\guava\guava\14.0.1\guava-14.0.1.jar;H:\Respositories2\repository\org\glassfish\hk2\hk2-api\2.2.0-b21\hk2-api-2.2.0-b21.jar;H:\Respositories2\repository\org\glassfish\hk2\external\javax.inject\2.2.0-b21\javax.inject-2.2.0-b21.jar;H:\Respositories2\repository\org\glassfish\hk2\hk2-locator\2.2.0-b21\hk2-locator-2.2.0-b21.jar;H:\Respositories2\repository\org\glassfish\hk2\external\asm-all-repackaged\2.2.0-b21\asm-all-repackaged-2.2.0-b21.jar;H:\Respositories2\repository\org\glassfish\hk2\external\cglib\2.2.0-b21\cglib-2.2.0-b21.jar;H:\Respositories2\repository\javax\validation\validation-api\1.1.0.Final\validation-api-1.1.0.Final.jar;H:\Respositories2\repository\org\glassfish\jersey\containers\jersey-container-servlet-core\2.4.1\jersey-container-servlet-core-2.4.1.jar;H:\Respositories2\repository\org\glassfish\hk2\hk2\2.2.0-b21\hk2-2.2.0-b21.jar;H:\Respositories2\repository\org\glassfish\hk2\hk2-utils\2.2.0-b21\hk2-utils-2.2.0-b21.jar;H:\Respositories2\repository\javax\inject\javax.inject\1\javax.inject-1.jar;H:\Respositories2\repository\org\glassfish\hk2\config-types\2.2.0-b21\config-types-2.2.0-b21.jar;H:\Respositories2\repository\org\glassfish\hk2\core\2.2.0-b21\core-2.2.0-b21.jar;H:\Respositories2\repository\org\glassfish\hk2\hk2-config\2.2.0-b21\hk2-config-2.2.0-b21.jar;H:\Respositories2\repository\org\jvnet\tiger-types\1.4\tiger-types-1.4.jar;H:\Respositories2\repository\org\glassfish\hk2\external\bean-validator\2.2.0-b21\bean-validator-2.2.0-b21.jar;H:\Respositories2\repository\org\glassfish\hk2\hk2-runlevel\2.2.0-b21\hk2-runlevel-2.2.0-b21.jar;H:\Respositories2\repository\org\glassfish\hk2\class-model\2.2.0-b21\class-model-2.2.0-b21.jar;H:\Respositories2\repository\org\glassfish\hk2\spring-bridge\2.2.0-b21\spring-bridge-2.2.0-b21.jar;H:\Respositories2\repository\javax\ws\rs\javax.ws.rs-api\2.0\javax.ws.rs-api-2.0.jar;H:\Respositories2\repository\org\glassfish\jersey\media\jersey-media-json-jackson\2.4.1\jersey-media-json-jackson-2.4.1.jar;H:\Respositories2\repository\org\glassfish\jersey\core\jersey-common\2.4.1\jersey-common-2.4.1.jar;H:\Respositories2\repository\javax\annotation\javax.annotation-api\1.2\javax.annotation-api-1.2.jar;H:\Respositories2\repository\org\glassfish\hk2\osgi-resource-locator\1.0.1\osgi-resource-locator-1.0.1.jar;H:\Respositories2\repository\org\codehaus\groovy\groovy-all\2.2.0\groovy-all-2.2.0.jar;H:\Respositories2\repository\org\glassfish\jersey\test-framework\providers\jersey-test-framework-provider-external\2.5.1\jersey-test-framework-provider-external-2.5.1.jar;H:\Respositories2\repository\org\glassfish\jersey\test-framework\jersey-test-framework-core\2.5.1\jersey-test-framework-core-2.5.1.jar;H:\Respositories2\repository\org\glassfish\jersey\core\jersey-client\2.5.1\jersey-client-2.5.1.jar;H:\Respositories2\repository\org\springframework\spring-test\3.2.6.RELEASE\spring-test-3.2.6.RELEASE.jar;H:\Respositories2\repository\org\springframework\session\spring-session\1.0.1.RELEASE\spring-session-1.0.1.RELEASE.jar;H:\Respositories2\repository\org\springframework\session\spring-session-data-redis\1.0.0.RELEASE\spring-session-data-redis-1.0.0.RELEASE.jar;H:\Respositories2\repository\org\apache\commons\commons-pool2\2.2\commons-pool2-2.2.jar;H:\Respositories2\repository\redis\clients\jedis\2.6.0\jedis-2.6.0.jar;H:\Respositories2\repository\org\springframework\data\spring-data-redis\1.4.1.RELEASE\spring-data-redis-1.4.1.RELEASE.jar;H:\Respositories2\repository\net\sf\ehcache\ehcache-core\2.6.11\ehcache-core-2.6.11.jar;H:\Respositories2\repository\org\hibernate3\hibernate3\3.0.0\hibernate3-3.0.0.jar;H:\Respositories2\repository\com\google\code\gson\gson\2.1\gson-2.1.jar;H:\Respositories2\repository\org\apache\openejb\javaee-api\5.0-1\javaee-api-5.0-1.jar;H:\Respositories2\repository\com\alibaba\druid\1.0.2\druid-1.0.2.jar;H:\Respositories2\repository\javax\faces\jsf-impl\1.2_04\jsf-impl-1.2_04.jar;H:\Respositories2\repository\javax\faces\jsf-api\1.2_04\jsf-api-1.2_04.jar;H:\Respositories2\repository\javax\transaction\jta\1.1\jta-1.1.jar;H:\Respositories2\repository\org\apache\ws\wss4j\1.5.1\wss4j-1.5.1.jar;H:\Respositories2\repository\org\hibernate\javax\persistence\hibernate-jpa-2.0-api\1.0.1.Final\hibernate-jpa-2.0-api-1.0.1.Final.jar;H:\Respositories2\repository\hibernate\antlr\2.7.5H3\antlr-2.7.5H3.jar;H:\Respositories2\repository\javassist\javassist\3.9.0.GA\javassist-3.9.0.GA.jar;H:\Respositories2\repository\com\fx\mobile\mobile-model\0.0.1-SNAPSHOT\mobile-model-0.0.1-SNAPSHOT.jar;H:\Respositories2\repository\com\fx\mobile\mobile-core\0.0.1\mobile-core-0.0.1.jar;H:\Respositories2\repository\Decoder\sun.misc.BASE64Decoder\1.0.0\sun.misc.BASE64Decoder-1.0.0.jar;H:\Respositories2\repository\marketingFile\marketingFile\0.0.1\marketingFile-0.0.1.jar;H:\Respositories2\repository\com\qq\connect\Sdk4J\1.0\Sdk4J-1.0.jar;H:\Respositories2\repository\org\apache\commons\commons-io\1.3.2\commons-io-1.3.2.jar;/E:/新建文件夹/eclipse/configuration/org.eclipse.osgi/362/0/.cp/;/E:/新建文件夹/eclipse/configuration/org.eclipse.osgi/361/0/.cp/, hibernate.bytecode.use_reflection_optimizer=false, hibernate.query.substitutions=true 'Y', false 'N', hibernate.show_sql=true, java.vm.specification.version=1.7, sun.arch.data.model=64, java.home=E:\JDK1.7, sun.java.command=org.eclipse.jdt.internal.junit.runner.RemoteTestRunner -version 3 -port 61025 -testLoaderClass org.eclipse.jdt.internal.junit4.runner.JUnit4TestLoader -loaderpluginname org.eclipse.jdt.junit4.runtime -classNames com.fx.mobile.junit.UserOperateDaoImplTest, hibernate.dialect=org.hibernate.dialect.MySQLDialect, java.specification.vendor=Oracle Corporation, user.language=zh, awt.toolkit=sun.awt.windows.WToolkit, java.vm.info=mixed mode, java.version=1.7.0_17, java.ext.dirs=E:\JDK1.7\lib\ext;C:\WINDOWS\Sun\Java\lib\ext, sun.boot.class.path=E:\JDK1.7\lib\resources.jar;E:\JDK1.7\lib\rt.jar;E:\JDK1.7\lib\sunrsasign.jar;E:\JDK1.7\lib\jsse.jar;E:\JDK1.7\lib\jce.jar;E:\JDK1.7\lib\charsets.jar;E:\JDK1.7\lib\jfr.jar;E:\JDK1.7\classes, java.vendor=Oracle Corporation, hibernate.jdbc.batch_size=25, file.separator=\, java.vendor.url.bug=http://bugreport.sun.com/bugreport/, hibernate.hbm2ddl.auto=update, hibernate.connection.provider_class=org.springframework.orm.hibernate3.LocalDataSourceConnectionProvider, sun.cpu.endian=little, sun.io.unicode.encoding=UnicodeLittle, sun.desktop=windows, sun.cpu.isalist=amd64}
2015-11-24 16:23:21,25715-11-24 16:23:21 DEBUG (CacheManager.java:684 LINE) CacheManager.parseConfiguration -> Configuring ehcache from classpath.
2015-11-24 16:23:21,26415-11-24 16:23:21 DEBUG (ConfigurationFactory.java:132 LINE) ConfigurationFactory.parseConfiguration -> Configuring ehcache from ehcache.xml found in the classpath: file:/G:/workspace/mobile-user/target/classes/ehcache.xml
2015-11-24 16:23:21,26515-11-24 16:23:21 DEBUG (ConfigurationFactory.java:98 LINE) ConfigurationFactory.parseConfiguration -> Configuring ehcache from URL: file:/G:/workspace/mobile-user/target/classes/ehcache.xml
2015-11-24 16:23:21,26515-11-24 16:23:21 DEBUG (ConfigurationFactory.java:150 LINE) ConfigurationFactory.parseConfiguration -> Configuring ehcache from InputStream
2015-11-24 16:23:21,29415-11-24 16:23:21 DEBUG (DiskStoreConfiguration.java:141 LINE) DiskStoreConfiguration.translatePath -> Disk Store Path: C:\Users\gqy\AppData\Local\Temp\
2015-11-24 16:23:21,31315-11-24 16:23:21 DEBUG (PropertyUtil.java:88 LINE) PropertyUtil.parseProperties -> propertiesString is null.
2015-11-24 16:23:21,37415-11-24 16:23:21 DEBUG (ConfigurationHelper.java:185 LINE) ConfigurationHelper.createCacheManagerEventListener -> No CacheManagerEventListenerFactory class specified. Skipping...
2015-11-24 16:23:21,42615-11-24 16:23:21 DEBUG (Cache.java:955 LINE) Cache.createBootstrapCacheLoader -> No BootstrapCacheLoaderFactory class specified. Skipping...
2015-11-24 16:23:21,42615-11-24 16:23:21 DEBUG (Cache.java:929 LINE) Cache.createCacheWriter -> CacheWriter factory not configured. Skipping...
2015-11-24 16:23:21,42915-11-24 16:23:21 DEBUG (ConfigurationHelper.java:96 LINE) ConfigurationHelper.createCacheExceptionHandler -> No CacheExceptionHandlerFactory class specified. Skipping...
2015-11-24 16:23:21,45115-11-24 16:23:21 DEBUG (DefaultIdentifierGeneratorFactory.java:90 LINE) DefaultIdentifierGeneratorFactory.setDialect -> Setting dialect [org.hibernate.dialect.MySQLDialect]
2015-11-24 16:23:21,45215-11-24 16:23:21 DEBUG (DefaultIdentifierGeneratorFactory.java:90 LINE) DefaultIdentifierGeneratorFactory.setDialect -> Setting dialect [org.hibernate.dialect.MySQLDialect]
2015-11-24 16:23:21,45215-11-24 16:23:21 DEBUG (DefaultIdentifierGeneratorFactory.java:90 LINE) DefaultIdentifierGeneratorFactory.setDialect -> Setting dialect [org.hibernate.dialect.MySQLDialect]
2015-11-24 16:23:21,68615-11-24 16:23:21 DEBUG (AbstractEntityPersister.java:2952 LINE) AbstractEntityPersister.logStaticSQL -> Static SQL for entity: com.fx.mobile.model.NoteNumbRecord
2015-11-24 16:23:21,68715-11-24 16:23:21 DEBUG (AbstractEntityPersister.java:2957 LINE) AbstractEntityPersister.logStaticSQL ->  Version select: select id from note_numb_record where id =?
2015-11-24 16:23:21,68715-11-24 16:23:21 DEBUG (AbstractEntityPersister.java:2960 LINE) AbstractEntityPersister.logStaticSQL ->  Snapshot select: select notenumbre_.id, notenumbre_.node_numb as node2_1_ from note_numb_record notenumbre_ where notenumbre_.id=?
2015-11-24 16:23:21,68715-11-24 16:23:21 DEBUG (AbstractEntityPersister.java:2963 LINE) AbstractEntityPersister.logStaticSQL ->  Insert 0: insert into note_numb_record (node_numb, id) values (?, ?)
2015-11-24 16:23:21,68715-11-24 16:23:21 DEBUG (AbstractEntityPersister.java:2964 LINE) AbstractEntityPersister.logStaticSQL ->  Update 0: update note_numb_record set node_numb=? where id=?
2015-11-24 16:23:21,68815-11-24 16:23:21 DEBUG (AbstractEntityPersister.java:2965 LINE) AbstractEntityPersister.logStaticSQL ->  Delete 0: delete from note_numb_record where id=?
2015-11-24 16:23:21,68815-11-24 16:23:21 DEBUG (AbstractEntityPersister.java:2969 LINE) AbstractEntityPersister.logStaticSQL ->  Identity insert: insert into note_numb_record (node_numb) values (?)
2015-11-24 16:23:21,69315-11-24 16:23:21 DEBUG (AbstractEntityPersister.java:2952 LINE) AbstractEntityPersister.logStaticSQL -> Static SQL for entity: com.fx.mobile.model.CrashLog
2015-11-24 16:23:21,69315-11-24 16:23:21 DEBUG (AbstractEntityPersister.java:2957 LINE) AbstractEntityPersister.logStaticSQL ->  Version select: select id from marketing1.crash_log where id =?
2015-11-24 16:23:21,69415-11-24 16:23:21 DEBUG (AbstractEntityPersister.java:2960 LINE) AbstractEntityPersister.logStaticSQL ->  Snapshot select: select crashlog_.id, crashlog_.url as url2_, crashlog_.describes as describes2_, crashlog_.addDate as addDate2_ from marketing1.crash_log crashlog_ where crashlog_.id=?
2015-11-24 16:23:21,69415-11-24 16:23:21 DEBUG (AbstractEntityPersister.java:2963 LINE) AbstractEntityPersister.logStaticSQL ->  Insert 0: insert into marketing1.crash_log (url, describes, addDate, id) values (?, ?, ?, ?)
2015-11-24 16:23:21,69415-11-24 16:23:21 DEBUG (AbstractEntityPersister.java:2964 LINE) AbstractEntityPersister.logStaticSQL ->  Update 0: update marketing1.crash_log set url=?, describes=?, addDate=? where id=?
2015-11-24 16:23:21,69415-11-24 16:23:21 DEBUG (AbstractEntityPersister.java:2965 LINE) AbstractEntityPersister.logStaticSQL ->  Delete 0: delete from marketing1.crash_log where id=?
2015-11-24 16:23:21,69515-11-24 16:23:21 DEBUG (AbstractEntityPersister.java:2969 LINE) AbstractEntityPersister.logStaticSQL ->  Identity insert: insert into marketing1.crash_log (url, describes, addDate) values (?, ?, ?)
2015-11-24 16:23:21,71715-11-24 16:23:21 DEBUG (AbstractEntityPersister.java:2952 LINE) AbstractEntityPersister.logStaticSQL -> Static SQL for entity: com.fx.mobile.model.UserOperate
2015-11-24 16:23:21,71715-11-24 16:23:21 DEBUG (AbstractEntityPersister.java:2957 LINE) AbstractEntityPersister.logStaticSQL ->  Version select: select id from user_operate where id =?
2015-11-24 16:23:21,71815-11-24 16:23:21 DEBUG (AbstractEntityPersister.java:2960 LINE) AbstractEntityPersister.logStaticSQL ->  Snapshot select: select useroperat_.id, useroperat_.userName as userName0_, useroperat_.userPassword as userPass3_0_, useroperat_.phicomm_id as phicomm4_0_, useroperat_.userEmail as userEmail0_, useroperat_.user_PhoneNumb as user6_0_, useroperat_.userType as userType0_, useroperat_.isChecked as isChecked0_, useroperat_.nickname as nickname0_, useroperat_.figureurl as figureurl0_, useroperat_.sex as sex0_, useroperat_.province as province0_, useroperat_.city as city0_, useroperat_.birthday as birthday0_, useroperat_.open_id as open15_0_, useroperat_.open_key as open16_0_, useroperat_.access_token as access17_0_, useroperat_.expirese_in as expirese18_0_, useroperat_.devinfo as devinfo0_, useroperat_.userinfo as userinfo0_, useroperat_.openqq as openqq0_, useroperat_.openqqinfo as openqqinfo0_, useroperat_.opensina as opensina0_, useroperat_.opensinainfo as opensin24_0_, useroperat_.createTime as createTime0_, useroperat_.updateTime as updateTime0_, useroperat_.lastLoginTime as lastLog27_0_ from user_operate useroperat_ where useroperat_.id=?
2015-11-24 16:23:21,71815-11-24 16:23:21 DEBUG (AbstractEntityPersister.java:2963 LINE) AbstractEntityPersister.logStaticSQL ->  Insert 0: insert into user_operate (userName, userPassword, phicomm_id, userEmail, user_PhoneNumb, userType, isChecked, nickname, figureurl, sex, province, city, birthday, open_id, open_key, access_token, expirese_in, devinfo, userinfo, openqq, openqqinfo, opensina, opensinainfo, createTime, updateTime, lastLoginTime, id) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2015-11-24 16:23:21,71815-11-24 16:23:21 DEBUG (AbstractEntityPersister.java:2964 LINE) AbstractEntityPersister.logStaticSQL ->  Update 0: update user_operate set userName=?, userPassword=?, phicomm_id=?, userEmail=?, user_PhoneNumb=?, userType=?, isChecked=?, nickname=?, figureurl=?, sex=?, province=?, city=?, birthday=?, open_id=?, open_key=?, access_token=?, expirese_in=?, devinfo=?, userinfo=?, openqq=?, openqqinfo=?, opensina=?, opensinainfo=?, createTime=?, updateTime=?, lastLoginTime=? where id=?
2015-11-24 16:23:21,71915-11-24 16:23:21 DEBUG (AbstractEntityPersister.java:2965 LINE) AbstractEntityPersister.logStaticSQL ->  Delete 0: delete from user_operate where id=?
2015-11-24 16:23:21,71915-11-24 16:23:21 DEBUG (AbstractEntityPersister.java:2969 LINE) AbstractEntityPersister.logStaticSQL ->  Identity insert: insert into user_operate (userName, userPassword, phicomm_id, userEmail, user_PhoneNumb, userType, isChecked, nickname, figureurl, sex, province, city, birthday, open_id, open_key, access_token, expirese_in, devinfo, userinfo, openqq, openqqinfo, opensina, opensinainfo, createTime, updateTime, lastLoginTime) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2015-11-24 16:23:21,74415-11-24 16:23:21 DEBUG (EntityLoader.java:123 LINE) EntityLoader.<init> -> Static select for entity com.fx.mobile.model.NoteNumbRecord [NONE]: select notenumbre0_.id as id1_0_, notenumbre0_.node_numb as node2_1_0_ from note_numb_record notenumbre0_ where notenumbre0_.id=?
2015-11-24 16:23:21,74515-11-24 16:23:21 DEBUG (EntityLoader.java:123 LINE) EntityLoader.<init> -> Static select for entity com.fx.mobile.model.NoteNumbRecord [READ]: select notenumbre0_.id as id1_0_, notenumbre0_.node_numb as node2_1_0_ from note_numb_record notenumbre0_ where notenumbre0_.id=?
2015-11-24 16:23:21,74615-11-24 16:23:21 DEBUG (EntityLoader.java:123 LINE) EntityLoader.<init> -> Static select for entity com.fx.mobile.model.NoteNumbRecord [UPGRADE]: select notenumbre0_.id as id1_0_, notenumbre0_.node_numb as node2_1_0_ from note_numb_record notenumbre0_ where notenumbre0_.id=? for update
2015-11-24 16:23:21,74615-11-24 16:23:21 DEBUG (EntityLoader.java:123 LINE) EntityLoader.<init> -> Static select for entity com.fx.mobile.model.NoteNumbRecord [UPGRADE_NOWAIT]: select notenumbre0_.id as id1_0_, notenumbre0_.node_numb as node2_1_0_ from note_numb_record notenumbre0_ where notenumbre0_.id=? for update
2015-11-24 16:23:21,74615-11-24 16:23:21 DEBUG (EntityLoader.java:123 LINE) EntityLoader.<init> -> Static select for entity com.fx.mobile.model.NoteNumbRecord [FORCE]: select notenumbre0_.id as id1_0_, notenumbre0_.node_numb as node2_1_0_ from note_numb_record notenumbre0_ where notenumbre0_.id=? for update
2015-11-24 16:23:21,74715-11-24 16:23:21 DEBUG (EntityLoader.java:123 LINE) EntityLoader.<init> -> Static select for entity com.fx.mobile.model.NoteNumbRecord [PESSIMISTIC_READ]: select notenumbre0_.id as id1_0_, notenumbre0_.node_numb as node2_1_0_ from note_numb_record notenumbre0_ where notenumbre0_.id=? lock in share mode
2015-11-24 16:23:21,74715-11-24 16:23:21 DEBUG (EntityLoader.java:123 LINE) EntityLoader.<init> -> Static select for entity com.fx.mobile.model.NoteNumbRecord [PESSIMISTIC_WRITE]: select notenumbre0_.id as id1_0_, notenumbre0_.node_numb as node2_1_0_ from note_numb_record notenumbre0_ where notenumbre0_.id=? for update
2015-11-24 16:23:21,74815-11-24 16:23:21 DEBUG (EntityLoader.java:123 LINE) EntityLoader.<init> -> Static select for entity com.fx.mobile.model.NoteNumbRecord [PESSIMISTIC_FORCE_INCREMENT]: select notenumbre0_.id as id1_0_, notenumbre0_.node_numb as node2_1_0_ from note_numb_record notenumbre0_ where notenumbre0_.id=? for update
2015-11-24 16:23:21,74815-11-24 16:23:21 DEBUG (EntityLoader.java:123 LINE) EntityLoader.<init> -> Static select for entity com.fx.mobile.model.NoteNumbRecord [OPTIMISTIC]: select notenumbre0_.id as id1_0_, notenumbre0_.node_numb as node2_1_0_ from note_numb_record notenumbre0_ where notenumbre0_.id=?
2015-11-24 16:23:21,74815-11-24 16:23:21 DEBUG (EntityLoader.java:123 LINE) EntityLoader.<init> -> Static select for entity com.fx.mobile.model.NoteNumbRecord [OPTIMISTIC_FORCE_INCREMENT]: select notenumbre0_.id as id1_0_, notenumbre0_.node_numb as node2_1_0_ from note_numb_record notenumbre0_ where notenumbre0_.id=?
2015-11-24 16:23:21,80615-11-24 16:23:21 DEBUG (CascadeEntityLoader.java:56 LINE) CascadeEntityLoader.<init> -> Static select for action ACTION_MERGE on entity com.fx.mobile.model.NoteNumbRecord: select notenumbre0_.id as id1_0_, notenumbre0_.node_numb as node2_1_0_ from note_numb_record notenumbre0_ where notenumbre0_.id=?
2015-11-24 16:23:21,80615-11-24 16:23:21 DEBUG (CascadeEntityLoader.java:56 LINE) CascadeEntityLoader.<init> -> Static select for action ACTION_REFRESH on entity com.fx.mobile.model.NoteNumbRecord: select notenumbre0_.id as id1_0_, notenumbre0_.node_numb as node2_1_0_ from note_numb_record notenumbre0_ where notenumbre0_.id=?
2015-11-24 16:23:21,80915-11-24 16:23:21 DEBUG (EntityLoader.java:123 LINE) EntityLoader.<init> -> Static select for entity com.fx.mobile.model.CrashLog [NONE]: select crashlog0_.id as id2_0_, crashlog0_.url as url2_0_, crashlog0_.describes as describes2_0_, crashlog0_.addDate as addDate2_0_ from marketing1.crash_log crashlog0_ where crashlog0_.id=?
2015-11-24 16:23:21,81115-11-24 16:23:21 DEBUG (EntityLoader.java:123 LINE) EntityLoader.<init> -> Static select for entity com.fx.mobile.model.CrashLog [READ]: select crashlog0_.id as id2_0_, crashlog0_.url as url2_0_, crashlog0_.describes as describes2_0_, crashlog0_.addDate as addDate2_0_ from marketing1.crash_log crashlog0_ where crashlog0_.id=?
2015-11-24 16:23:21,81115-11-24 16:23:21 DEBUG (EntityLoader.java:123 LINE) EntityLoader.<init> -> Static select for entity com.fx.mobile.model.CrashLog [UPGRADE]: select crashlog0_.id as id2_0_, crashlog0_.url as url2_0_, crashlog0_.describes as describes2_0_, crashlog0_.addDate as addDate2_0_ from marketing1.crash_log crashlog0_ where crashlog0_.id=? for update
2015-11-24 16:23:21,81215-11-24 16:23:21 DEBUG (EntityLoader.java:123 LINE) EntityLoader.<init> -> Static select for entity com.fx.mobile.model.CrashLog [UPGRADE_NOWAIT]: select crashlog0_.id as id2_0_, crashlog0_.url as url2_0_, crashlog0_.describes as describes2_0_, crashlog0_.addDate as addDate2_0_ from marketing1.crash_log crashlog0_ where crashlog0_.id=? for update
2015-11-24 16:23:21,81215-11-24 16:23:21 DEBUG (EntityLoader.java:123 LINE) EntityLoader.<init> -> Static select for entity com.fx.mobile.model.CrashLog [FORCE]: select crashlog0_.id as id2_0_, crashlog0_.url as url2_0_, crashlog0_.describes as describes2_0_, crashlog0_.addDate as addDate2_0_ from marketing1.crash_log crashlog0_ where crashlog0_.id=? for update
2015-11-24 16:23:21,81315-11-24 16:23:21 DEBUG (EntityLoader.java:123 LINE) EntityLoader.<init> -> Static select for entity com.fx.mobile.model.CrashLog [PESSIMISTIC_READ]: select crashlog0_.id as id2_0_, crashlog0_.url as url2_0_, crashlog0_.describes as describes2_0_, crashlog0_.addDate as addDate2_0_ from marketing1.crash_log crashlog0_ where crashlog0_.id=? lock in share mode
2015-11-24 16:23:21,81315-11-24 16:23:21 DEBUG (EntityLoader.java:123 LINE) EntityLoader.<init> -> Static select for entity com.fx.mobile.model.CrashLog [PESSIMISTIC_WRITE]: select crashlog0_.id as id2_0_, crashlog0_.url as url2_0_, crashlog0_.describes as describes2_0_, crashlog0_.addDate as addDate2_0_ from marketing1.crash_log crashlog0_ where crashlog0_.id=? for update
2015-11-24 16:23:21,81415-11-24 16:23:21 DEBUG (EntityLoader.java:123 LINE) EntityLoader.<init> -> Static select for entity com.fx.mobile.model.CrashLog [PESSIMISTIC_FORCE_INCREMENT]: select crashlog0_.id as id2_0_, crashlog0_.url as url2_0_, crashlog0_.describes as describes2_0_, crashlog0_.addDate as addDate2_0_ from marketing1.crash_log crashlog0_ where crashlog0_.id=? for update
2015-11-24 16:23:21,81415-11-24 16:23:21 DEBUG (EntityLoader.java:123 LINE) EntityLoader.<init> -> Static select for entity com.fx.mobile.model.CrashLog [OPTIMISTIC]: select crashlog0_.id as id2_0_, crashlog0_.url as url2_0_, crashlog0_.describes as describes2_0_, crashlog0_.addDate as addDate2_0_ from marketing1.crash_log crashlog0_ where crashlog0_.id=?
2015-11-24 16:23:21,81415-11-24 16:23:21 DEBUG (EntityLoader.java:123 LINE) EntityLoader.<init> -> Static select for entity com.fx.mobile.model.CrashLog [OPTIMISTIC_FORCE_INCREMENT]: select crashlog0_.id as id2_0_, crashlog0_.url as url2_0_, crashlog0_.describes as describes2_0_, crashlog0_.addDate as addDate2_0_ from marketing1.crash_log crashlog0_ where crashlog0_.id=?
2015-11-24 16:23:21,81515-11-24 16:23:21 DEBUG (CascadeEntityLoader.java:56 LINE) CascadeEntityLoader.<init> -> Static select for action ACTION_MERGE on entity com.fx.mobile.model.CrashLog: select crashlog0_.id as id2_0_, crashlog0_.url as url2_0_, crashlog0_.describes as describes2_0_, crashlog0_.addDate as addDate2_0_ from marketing1.crash_log crashlog0_ where crashlog0_.id=?
2015-11-24 16:23:21,81515-11-24 16:23:21 DEBUG (CascadeEntityLoader.java:56 LINE) CascadeEntityLoader.<init> -> Static select for action ACTION_REFRESH on entity com.fx.mobile.model.CrashLog: select crashlog0_.id as id2_0_, crashlog0_.url as url2_0_, crashlog0_.describes as describes2_0_, crashlog0_.addDate as addDate2_0_ from marketing1.crash_log crashlog0_ where crashlog0_.id=?
2015-11-24 16:23:21,81615-11-24 16:23:21 DEBUG (EntityLoader.java:123 LINE) EntityLoader.<init> -> Static select for entity com.fx.mobile.model.UserOperate [NONE]: select useroperat0_.id as id0_0_, useroperat0_.userName as userName0_0_, useroperat0_.userPassword as userPass3_0_0_, useroperat0_.phicomm_id as phicomm4_0_0_, useroperat0_.userEmail as userEmail0_0_, useroperat0_.user_PhoneNumb as user6_0_0_, useroperat0_.userType as userType0_0_, useroperat0_.isChecked as isChecked0_0_, useroperat0_.nickname as nickname0_0_, useroperat0_.figureurl as figureurl0_0_, useroperat0_.sex as sex0_0_, useroperat0_.province as province0_0_, useroperat0_.city as city0_0_, useroperat0_.birthday as birthday0_0_, useroperat0_.open_id as open15_0_0_, useroperat0_.open_key as open16_0_0_, useroperat0_.access_token as access17_0_0_, useroperat0_.expirese_in as expirese18_0_0_, useroperat0_.devinfo as devinfo0_0_, useroperat0_.userinfo as userinfo0_0_, useroperat0_.openqq as openqq0_0_, useroperat0_.openqqinfo as openqqinfo0_0_, useroperat0_.opensina as opensina0_0_, useroperat0_.opensinainfo as opensin24_0_0_, useroperat0_.createTime as createTime0_0_, useroperat0_.updateTime as updateTime0_0_, useroperat0_.lastLoginTime as lastLog27_0_0_ from user_operate useroperat0_ where useroperat0_.id=?
2015-11-24 16:23:21,81715-11-24 16:23:21 DEBUG (EntityLoader.java:123 LINE) EntityLoader.<init> -> Static select for entity com.fx.mobile.model.UserOperate [READ]: select useroperat0_.id as id0_0_, useroperat0_.userName as userName0_0_, useroperat0_.userPassword as userPass3_0_0_, useroperat0_.phicomm_id as phicomm4_0_0_, useroperat0_.userEmail as userEmail0_0_, useroperat0_.user_PhoneNumb as user6_0_0_, useroperat0_.userType as userType0_0_, useroperat0_.isChecked as isChecked0_0_, useroperat0_.nickname as nickname0_0_, useroperat0_.figureurl as figureurl0_0_, useroperat0_.sex as sex0_0_, useroperat0_.province as province0_0_, useroperat0_.city as city0_0_, useroperat0_.birthday as birthday0_0_, useroperat0_.open_id as open15_0_0_, useroperat0_.open_key as open16_0_0_, useroperat0_.access_token as access17_0_0_, useroperat0_.expirese_in as expirese18_0_0_, useroperat0_.devinfo as devinfo0_0_, useroperat0_.userinfo as userinfo0_0_, useroperat0_.openqq as openqq0_0_, useroperat0_.openqqinfo as openqqinfo0_0_, useroperat0_.opensina as opensina0_0_, useroperat0_.opensinainfo as opensin24_0_0_, useroperat0_.createTime as createTime0_0_, useroperat0_.updateTime as updateTime0_0_, useroperat0_.lastLoginTime as lastLog27_0_0_ from user_operate useroperat0_ where useroperat0_.id=?
2015-11-24 16:23:21,81715-11-24 16:23:21 DEBUG (EntityLoader.java:123 LINE) EntityLoader.<init> -> Static select for entity com.fx.mobile.model.UserOperate [UPGRADE]: select useroperat0_.id as id0_0_, useroperat0_.userName as userName0_0_, useroperat0_.userPassword as userPass3_0_0_, useroperat0_.phicomm_id as phicomm4_0_0_, useroperat0_.userEmail as userEmail0_0_, useroperat0_.user_PhoneNumb as user6_0_0_, useroperat0_.userType as userType0_0_, useroperat0_.isChecked as isChecked0_0_, useroperat0_.nickname as nickname0_0_, useroperat0_.figureurl as figureurl0_0_, useroperat0_.sex as sex0_0_, useroperat0_.province as province0_0_, useroperat0_.city as city0_0_, useroperat0_.birthday as birthday0_0_, useroperat0_.open_id as open15_0_0_, useroperat0_.open_key as open16_0_0_, useroperat0_.access_token as access17_0_0_, useroperat0_.expirese_in as expirese18_0_0_, useroperat0_.devinfo as devinfo0_0_, useroperat0_.userinfo as userinfo0_0_, useroperat0_.openqq as openqq0_0_, useroperat0_.openqqinfo as openqqinfo0_0_, useroperat0_.opensina as opensina0_0_, useroperat0_.opensinainfo as opensin24_0_0_, useroperat0_.createTime as createTime0_0_, useroperat0_.updateTime as updateTime0_0_, useroperat0_.lastLoginTime as lastLog27_0_0_ from user_operate useroperat0_ where useroperat0_.id=? for update
2015-11-24 16:23:21,81815-11-24 16:23:21 DEBUG (EntityLoader.java:123 LINE) EntityLoader.<init> -> Static select for entity com.fx.mobile.model.UserOperate [UPGRADE_NOWAIT]: select useroperat0_.id as id0_0_, useroperat0_.userName as userName0_0_, useroperat0_.userPassword as userPass3_0_0_, useroperat0_.phicomm_id as phicomm4_0_0_, useroperat0_.userEmail as userEmail0_0_, useroperat0_.user_PhoneNumb as user6_0_0_, useroperat0_.userType as userType0_0_, useroperat0_.isChecked as isChecked0_0_, useroperat0_.nickname as nickname0_0_, useroperat0_.figureurl as figureurl0_0_, useroperat0_.sex as sex0_0_, useroperat0_.province as province0_0_, useroperat0_.city as city0_0_, useroperat0_.birthday as birthday0_0_, useroperat0_.open_id as open15_0_0_, useroperat0_.open_key as open16_0_0_, useroperat0_.access_token as access17_0_0_, useroperat0_.expirese_in as expirese18_0_0_, useroperat0_.devinfo as devinfo0_0_, useroperat0_.userinfo as userinfo0_0_, useroperat0_.openqq as openqq0_0_, useroperat0_.openqqinfo as openqqinfo0_0_, useroperat0_.opensina as opensina0_0_, useroperat0_.opensinainfo as opensin24_0_0_, useroperat0_.createTime as createTime0_0_, useroperat0_.updateTime as updateTime0_0_, useroperat0_.lastLoginTime as lastLog27_0_0_ from user_operate useroperat0_ where useroperat0_.id=? for update
2015-11-24 16:23:21,81815-11-24 16:23:21 DEBUG (EntityLoader.java:123 LINE) EntityLoader.<init> -> Static select for entity com.fx.mobile.model.UserOperate [FORCE]: select useroperat0_.id as id0_0_, useroperat0_.userName as userName0_0_, useroperat0_.userPassword as userPass3_0_0_, useroperat0_.phicomm_id as phicomm4_0_0_, useroperat0_.userEmail as userEmail0_0_, useroperat0_.user_PhoneNumb as user6_0_0_, useroperat0_.userType as userType0_0_, useroperat0_.isChecked as isChecked0_0_, useroperat0_.nickname as nickname0_0_, useroperat0_.figureurl as figureurl0_0_, useroperat0_.sex as sex0_0_, useroperat0_.province as province0_0_, useroperat0_.city as city0_0_, useroperat0_.birthday as birthday0_0_, useroperat0_.open_id as open15_0_0_, useroperat0_.open_key as open16_0_0_, useroperat0_.access_token as access17_0_0_, useroperat0_.expirese_in as expirese18_0_0_, useroperat0_.devinfo as devinfo0_0_, useroperat0_.userinfo as userinfo0_0_, useroperat0_.openqq as openqq0_0_, useroperat0_.openqqinfo as openqqinfo0_0_, useroperat0_.opensina as opensina0_0_, useroperat0_.opensinainfo as opensin24_0_0_, useroperat0_.createTime as createTime0_0_, useroperat0_.updateTime as updateTime0_0_, useroperat0_.lastLoginTime as lastLog27_0_0_ from user_operate useroperat0_ where useroperat0_.id=? for update
2015-11-24 16:23:21,81915-11-24 16:23:21 DEBUG (EntityLoader.java:123 LINE) EntityLoader.<init> -> Static select for entity com.fx.mobile.model.UserOperate [PESSIMISTIC_READ]: select useroperat0_.id as id0_0_, useroperat0_.userName as userName0_0_, useroperat0_.userPassword as userPass3_0_0_, useroperat0_.phicomm_id as phicomm4_0_0_, useroperat0_.userEmail as userEmail0_0_, useroperat0_.user_PhoneNumb as user6_0_0_, useroperat0_.userType as userType0_0_, useroperat0_.isChecked as isChecked0_0_, useroperat0_.nickname as nickname0_0_, useroperat0_.figureurl as figureurl0_0_, useroperat0_.sex as sex0_0_, useroperat0_.province as province0_0_, useroperat0_.city as city0_0_, useroperat0_.birthday as birthday0_0_, useroperat0_.open_id as open15_0_0_, useroperat0_.open_key as open16_0_0_, useroperat0_.access_token as access17_0_0_, useroperat0_.expirese_in as expirese18_0_0_, useroperat0_.devinfo as devinfo0_0_, useroperat0_.userinfo as userinfo0_0_, useroperat0_.openqq as openqq0_0_, useroperat0_.openqqinfo as openqqinfo0_0_, useroperat0_.opensina as opensina0_0_, useroperat0_.opensinainfo as opensin24_0_0_, useroperat0_.createTime as createTime0_0_, useroperat0_.updateTime as updateTime0_0_, useroperat0_.lastLoginTime as lastLog27_0_0_ from user_operate useroperat0_ where useroperat0_.id=? lock in share mode
2015-11-24 16:23:21,82015-11-24 16:23:21 DEBUG (EntityLoader.java:123 LINE) EntityLoader.<init> -> Static select for entity com.fx.mobile.model.UserOperate [PESSIMISTIC_WRITE]: select useroperat0_.id as id0_0_, useroperat0_.userName as userName0_0_, useroperat0_.userPassword as userPass3_0_0_, useroperat0_.phicomm_id as phicomm4_0_0_, useroperat0_.userEmail as userEmail0_0_, useroperat0_.user_PhoneNumb as user6_0_0_, useroperat0_.userType as userType0_0_, useroperat0_.isChecked as isChecked0_0_, useroperat0_.nickname as nickname0_0_, useroperat0_.figureurl as figureurl0_0_, useroperat0_.sex as sex0_0_, useroperat0_.province as province0_0_, useroperat0_.city as city0_0_, useroperat0_.birthday as birthday0_0_, useroperat0_.open_id as open15_0_0_, useroperat0_.open_key as open16_0_0_, useroperat0_.access_token as access17_0_0_, useroperat0_.expirese_in as expirese18_0_0_, useroperat0_.devinfo as devinfo0_0_, useroperat0_.userinfo as userinfo0_0_, useroperat0_.openqq as openqq0_0_, useroperat0_.openqqinfo as openqqinfo0_0_, useroperat0_.opensina as opensina0_0_, useroperat0_.opensinainfo as opensin24_0_0_, useroperat0_.createTime as createTime0_0_, useroperat0_.updateTime as updateTime0_0_, useroperat0_.lastLoginTime as lastLog27_0_0_ from user_operate useroperat0_ where useroperat0_.id=? for update
2015-11-24 16:23:21,82015-11-24 16:23:21 DEBUG (EntityLoader.java:123 LINE) EntityLoader.<init> -> Static select for entity com.fx.mobile.model.UserOperate [PESSIMISTIC_FORCE_INCREMENT]: select useroperat0_.id as id0_0_, useroperat0_.userName as userName0_0_, useroperat0_.userPassword as userPass3_0_0_, useroperat0_.phicomm_id as phicomm4_0_0_, useroperat0_.userEmail as userEmail0_0_, useroperat0_.user_PhoneNumb as user6_0_0_, useroperat0_.userType as userType0_0_, useroperat0_.isChecked as isChecked0_0_, useroperat0_.nickname as nickname0_0_, useroperat0_.figureurl as figureurl0_0_, useroperat0_.sex as sex0_0_, useroperat0_.province as province0_0_, useroperat0_.city as city0_0_, useroperat0_.birthday as birthday0_0_, useroperat0_.open_id as open15_0_0_, useroperat0_.open_key as open16_0_0_, useroperat0_.access_token as access17_0_0_, useroperat0_.expirese_in as expirese18_0_0_, useroperat0_.devinfo as devinfo0_0_, useroperat0_.userinfo as userinfo0_0_, useroperat0_.openqq as openqq0_0_, useroperat0_.openqqinfo as openqqinfo0_0_, useroperat0_.opensina as opensina0_0_, useroperat0_.opensinainfo as opensin24_0_0_, useroperat0_.createTime as createTime0_0_, useroperat0_.updateTime as updateTime0_0_, useroperat0_.lastLoginTime as lastLog27_0_0_ from user_operate useroperat0_ where useroperat0_.id=? for update
2015-11-24 16:23:21,82215-11-24 16:23:21 DEBUG (EntityLoader.java:123 LINE) EntityLoader.<init> -> Static select for entity com.fx.mobile.model.UserOperate [OPTIMISTIC]: select useroperat0_.id as id0_0_, useroperat0_.userName as userName0_0_, useroperat0_.userPassword as userPass3_0_0_, useroperat0_.phicomm_id as phicomm4_0_0_, useroperat0_.userEmail as userEmail0_0_, useroperat0_.user_PhoneNumb as user6_0_0_, useroperat0_.userType as userType0_0_, useroperat0_.isChecked as isChecked0_0_, useroperat0_.nickname as nickname0_0_, useroperat0_.figureurl as figureurl0_0_, useroperat0_.sex as sex0_0_, useroperat0_.province as province0_0_, useroperat0_.city as city0_0_, useroperat0_.birthday as birthday0_0_, useroperat0_.open_id as open15_0_0_, useroperat0_.open_key as open16_0_0_, useroperat0_.access_token as access17_0_0_, useroperat0_.expirese_in as expirese18_0_0_, useroperat0_.devinfo as devinfo0_0_, useroperat0_.userinfo as userinfo0_0_, useroperat0_.openqq as openqq0_0_, useroperat0_.openqqinfo as openqqinfo0_0_, useroperat0_.opensina as opensina0_0_, useroperat0_.opensinainfo as opensin24_0_0_, useroperat0_.createTime as createTime0_0_, useroperat0_.updateTime as updateTime0_0_, useroperat0_.lastLoginTime as lastLog27_0_0_ from user_operate useroperat0_ where useroperat0_.id=?
2015-11-24 16:23:21,82315-11-24 16:23:21 DEBUG (EntityLoader.java:123 LINE) EntityLoader.<init> -> Static select for entity com.fx.mobile.model.UserOperate [OPTIMISTIC_FORCE_INCREMENT]: select useroperat0_.id as id0_0_, useroperat0_.userName as userName0_0_, useroperat0_.userPassword as userPass3_0_0_, useroperat0_.phicomm_id as phicomm4_0_0_, useroperat0_.userEmail as userEmail0_0_, useroperat0_.user_PhoneNumb as user6_0_0_, useroperat0_.userType as userType0_0_, useroperat0_.isChecked as isChecked0_0_, useroperat0_.nickname as nickname0_0_, useroperat0_.figureurl as figureurl0_0_, useroperat0_.sex as sex0_0_, useroperat0_.province as province0_0_, useroperat0_.city as city0_0_, useroperat0_.birthday as birthday0_0_, useroperat0_.open_id as open15_0_0_, useroperat0_.open_key as open16_0_0_, useroperat0_.access_token as access17_0_0_, useroperat0_.expirese_in as expirese18_0_0_, useroperat0_.devinfo as devinfo0_0_, useroperat0_.userinfo as userinfo0_0_, useroperat0_.openqq as openqq0_0_, useroperat0_.openqqinfo as openqqinfo0_0_, useroperat0_.opensina as opensina0_0_, useroperat0_.opensinainfo as opensin24_0_0_, useroperat0_.createTime as createTime0_0_, useroperat0_.updateTime as updateTime0_0_, useroperat0_.lastLoginTime as lastLog27_0_0_ from user_operate useroperat0_ where useroperat0_.id=?
2015-11-24 16:23:21,82315-11-24 16:23:21 DEBUG (CascadeEntityLoader.java:56 LINE) CascadeEntityLoader.<init> -> Static select for action ACTION_MERGE on entity com.fx.mobile.model.UserOperate: select useroperat0_.id as id0_0_, useroperat0_.userName as userName0_0_, useroperat0_.userPassword as userPass3_0_0_, useroperat0_.phicomm_id as phicomm4_0_0_, useroperat0_.userEmail as userEmail0_0_, useroperat0_.user_PhoneNumb as user6_0_0_, useroperat0_.userType as userType0_0_, useroperat0_.isChecked as isChecked0_0_, useroperat0_.nickname as nickname0_0_, useroperat0_.figureurl as figureurl0_0_, useroperat0_.sex as sex0_0_, useroperat0_.province as province0_0_, useroperat0_.city as city0_0_, useroperat0_.birthday as birthday0_0_, useroperat0_.open_id as open15_0_0_, useroperat0_.open_key as open16_0_0_, useroperat0_.access_token as access17_0_0_, useroperat0_.expirese_in as expirese18_0_0_, useroperat0_.devinfo as devinfo0_0_, useroperat0_.userinfo as userinfo0_0_, useroperat0_.openqq as openqq0_0_, useroperat0_.openqqinfo as openqqinfo0_0_, useroperat0_.opensina as opensina0_0_, useroperat0_.opensinainfo as opensin24_0_0_, useroperat0_.createTime as createTime0_0_, useroperat0_.updateTime as updateTime0_0_, useroperat0_.lastLoginTime as lastLog27_0_0_ from user_operate useroperat0_ where useroperat0_.id=?
2015-11-24 16:23:21,82415-11-24 16:23:21 DEBUG (CascadeEntityLoader.java:56 LINE) CascadeEntityLoader.<init> -> Static select for action ACTION_REFRESH on entity com.fx.mobile.model.UserOperate: select useroperat0_.id as id0_0_, useroperat0_.userName as userName0_0_, useroperat0_.userPassword as userPass3_0_0_, useroperat0_.phicomm_id as phicomm4_0_0_, useroperat0_.userEmail as userEmail0_0_, useroperat0_.user_PhoneNumb as user6_0_0_, useroperat0_.userType as userType0_0_, useroperat0_.isChecked as isChecked0_0_, useroperat0_.nickname as nickname0_0_, useroperat0_.figureurl as figureurl0_0_, useroperat0_.sex as sex0_0_, useroperat0_.province as province0_0_, useroperat0_.city as city0_0_, useroperat0_.birthday as birthday0_0_, useroperat0_.open_id as open15_0_0_, useroperat0_.open_key as open16_0_0_, useroperat0_.access_token as access17_0_0_, useroperat0_.expirese_in as expirese18_0_0_, useroperat0_.devinfo as devinfo0_0_, useroperat0_.userinfo as userinfo0_0_, useroperat0_.openqq as openqq0_0_, useroperat0_.openqqinfo as openqqinfo0_0_, useroperat0_.opensina as opensina0_0_, useroperat0_.opensinainfo as opensin24_0_0_, useroperat0_.createTime as createTime0_0_, useroperat0_.updateTime as updateTime0_0_, useroperat0_.lastLoginTime as lastLog27_0_0_ from user_operate useroperat0_ where useroperat0_.id=?
2015-11-24 16:23:21,82615-11-24 16:23:21 DEBUG (SessionFactoryObjectFactory.java:61 LINE) SessionFactoryObjectFactory.<clinit> -> initializing class SessionFactoryObjectFactory
2015-11-24 16:23:21,82715-11-24 16:23:21 DEBUG (SessionFactoryObjectFactory.java:99 LINE) SessionFactoryObjectFactory.addInstance -> registered: f7aa983d-358b-4368-ba35-755fc79b0b19 (unnamed)
2015-11-24 16:23:21,82815-11-24 16:23:21  INFO (SessionFactoryObjectFactory.java:105 LINE) SessionFactoryObjectFactory.addInstance -> Not binding factory to JNDI, no JNDI name configured
2015-11-24 16:23:21,82815-11-24 16:23:21 DEBUG (SessionFactoryImpl.java:369 LINE) SessionFactoryImpl.<init> -> instantiated session factory
2015-11-24 16:23:21,83415-11-24 16:23:21  INFO (SchemaUpdate.java:155 LINE) SchemaUpdate.execute -> Running hbm2ddl schema update
2015-11-24 16:23:21,83515-11-24 16:23:21  INFO (SchemaUpdate.java:167 LINE) SchemaUpdate.execute -> fetching database metadata
2015-11-24 16:23:21,83715-11-24 16:23:21  INFO (SchemaUpdate.java:179 LINE) SchemaUpdate.execute -> updating schema
2015-11-24 16:23:21,83715-11-24 16:23:21 DEBUG (Configuration.java:3995 LINE) Configuration$MetadataSourceQueue.processHbmXmlQueue -> Processing hbm.xml files
2015-11-24 16:23:21,83815-11-24 16:23:21 DEBUG (Configuration.java:4025 LINE) Configuration$MetadataSourceQueue.processAnnotatedClassesQueue -> Process annotated classes
2015-11-24 16:23:21,83815-11-24 16:23:21 DEBUG (Configuration.java:1466 LINE) Configuration.processFkSecondPassInOrder -> processing fk mappings (*ToOne and JoinedSubclass)
2015-11-24 16:23:21,83915-11-24 16:23:21 DEBUG (Configuration.java:1708 LINE) Configuration.originalSecondPassCompile -> processing extends queue
2015-11-24 16:23:21,83915-11-24 16:23:21 DEBUG (Configuration.java:1762 LINE) Configuration.processExtendsQueue -> processing extends queue
2015-11-24 16:23:21,84015-11-24 16:23:21 DEBUG (Configuration.java:1711 LINE) Configuration.originalSecondPassCompile -> processing collection mappings
2015-11-24 16:23:21,84015-11-24 16:23:21 DEBUG (Configuration.java:1721 LINE) Configuration.originalSecondPassCompile -> processing native query and ResultSetMapping mappings
2015-11-24 16:23:21,84215-11-24 16:23:21 DEBUG (Configuration.java:1729 LINE) Configuration.originalSecondPassCompile -> processing association property references
2015-11-24 16:23:21,84215-11-24 16:23:21 DEBUG (Configuration.java:1751 LINE) Configuration.originalSecondPassCompile -> processing foreign key constraints
2015-11-24 16:23:21,84515-11-24 16:23:21 DEBUG (DefaultTraversableResolver.java:84 LINE) DefaultTraversableResolver.detectJPA -> Found javax.persistence.Persistence on classpath, but no method 'getPersistenceUtil'. Assuming JPA 1 environment. All properties will per default be traversable.
2015-11-24 16:23:21,84615-11-24 16:23:21 DEBUG (ValidationXmlParser.java:88 LINE) ValidationXmlParser.getInputStream -> Trying to load META-INF/validation.xml for XML based Validator configuration.
2015-11-24 16:23:21,84715-11-24 16:23:21 DEBUG (ValidationXmlParser.java:95 LINE) ValidationXmlParser.getInputStream -> No META-INF/validation.xml found. Using annotation based configuration only.
2015-11-24 16:23:21,90015-11-24 16:23:21  INFO (DatabaseMetadata.java:119 LINE) DatabaseMetadata.getTableMetadata -> table not found: crash_log
2015-11-24 16:23:21,90015-11-24 16:23:21 DEBUG (DefaultIdentifierGeneratorFactory.java:90 LINE) DefaultIdentifierGeneratorFactory.setDialect -> Setting dialect [org.hibernate.dialect.MySQLDialect]
2015-11-24 16:23:21,93515-11-24 16:23:21  INFO (TableMetadata.java:65 LINE) TableMetadata.<init> -> table found: mobile_user.note_numb_record
2015-11-24 16:23:21,93515-11-24 16:23:21  INFO (TableMetadata.java:66 LINE) TableMetadata.<init> -> columns: [id, node_numb]
2015-11-24 16:23:21,93615-11-24 16:23:21  INFO (TableMetadata.java:68 LINE) TableMetadata.<init> -> foreign keys: []
2015-11-24 16:23:21,93615-11-24 16:23:21  INFO (TableMetadata.java:69 LINE) TableMetadata.<init> -> indexes: [primary]
2015-11-24 16:23:21,95615-11-24 16:23:21  INFO (TableMetadata.java:65 LINE) TableMetadata.<init> -> table found: mobile_user.user_operate
2015-11-24 16:23:21,95615-11-24 16:23:21  INFO (TableMetadata.java:66 LINE) TableMetadata.<init> -> columns: [birthday, sex, updatetime, open_id, openqq, opensina, userinfo, user_phonenumb, city, createtime, id, userpassword, username, lastlogintime, province, opensinainfo, figureurl, phicomm_id, open_key, access_token, nickname, usertype, ischecked, openqqinfo, useremail, devinfo, expirese_in]
2015-11-24 16:23:21,95615-11-24 16:23:21  INFO (TableMetadata.java:68 LINE) TableMetadata.<init> -> foreign keys: []
2015-11-24 16:23:21,95715-11-24 16:23:21  INFO (TableMetadata.java:69 LINE) TableMetadata.<init> -> indexes: [primary]
2015-11-24 16:23:21,95815-11-24 16:23:21  INFO (DatabaseMetadata.java:119 LINE) DatabaseMetadata.getTableMetadata -> table not found: crash_log
2015-11-24 16:23:21,95815-11-24 16:23:21 DEBUG (DefaultIdentifierGeneratorFactory.java:90 LINE) DefaultIdentifierGeneratorFactory.setDialect -> Setting dialect [org.hibernate.dialect.MySQLDialect]
2015-11-24 16:23:21,95915-11-24 16:23:21 DEBUG (DefaultIdentifierGeneratorFactory.java:90 LINE) DefaultIdentifierGeneratorFactory.setDialect -> Setting dialect [org.hibernate.dialect.MySQLDialect]
2015-11-24 16:23:21,96015-11-24 16:23:21 DEBUG (DefaultIdentifierGeneratorFactory.java:90 LINE) DefaultIdentifierGeneratorFactory.setDialect -> Setting dialect [org.hibernate.dialect.MySQLDialect]
2015-11-24 16:23:21,96015-11-24 16:23:21 DEBUG (SchemaUpdate.java:203 LINE) SchemaUpdate.execute -> create table marketing1.crash_log (id bigint not null auto_increment, url varchar(100), describes varchar(200), addDate varchar(30), primary key (id))
2015-11-24 16:23:21,96215-11-24 16:23:21 ERROR (SchemaUpdate.java:212 LINE) SchemaUpdate.execute -> Unsuccessful: create table marketing1.crash_log (id bigint not null auto_increment, url varchar(100), describes varchar(200), addDate varchar(30), primary key (id))
2015-11-24 16:23:21,96215-11-24 16:23:21 ERROR (SchemaUpdate.java:213 LINE) SchemaUpdate.execute -> Unknown database 'marketing1'
2015-11-24 16:23:21,96315-11-24 16:23:21  INFO (SchemaUpdate.java:217 LINE) SchemaUpdate.execute -> schema update complete
2015-11-24 16:23:21,96715-11-24 16:23:21  INFO (UpdateTimestampsCache.java:57 LINE) UpdateTimestampsCache.<init> -> starting update timestamps cache at region: org.hibernate.cache.UpdateTimestampsCache
2015-11-24 16:23:21,96915-11-24 16:23:21  WARN (EhCacheProvider.java:93 LINE) EhCacheProvider.buildCache -> Could not find configuration [org.hibernate.cache.UpdateTimestampsCache]; using defaults.
2015-11-24 16:23:22,01515-11-24 16:23:22 DEBUG (MemoryStore.java:153 LINE) MemoryStore.<init> -> Initialized net.sf.ehcache.store.MemoryStore for org.hibernate.cache.UpdateTimestampsCache
2015-11-24 16:23:22,02815-11-24 16:23:22 DEBUG (DiskStorePathManager.java:169 LINE) DiskStorePathManager.resolveAndLockIfNeeded -> Using diskstore path C:\Users\gqy\AppData\Local\Temp
2015-11-24 16:23:22,02815-11-24 16:23:22 DEBUG (DiskStorePathManager.java:170 LINE) DiskStorePathManager.resolveAndLockIfNeeded -> Holding exclusive lock on C:\Users\gqy\AppData\Local\Temp\.ehcache-diskstore.lock
2015-11-24 16:23:22,02915-11-24 16:23:22 DEBUG (DiskStorageFactory.java:860 LINE) DiskStorageFactory.deleteFile -> Failed to delete file org%002ehibernate%002ecache%002e%0055pdate%0054imestamps%0043ache.data
2015-11-24 16:23:22,03015-11-24 16:23:22 DEBUG (DiskStorageFactory.java:860 LINE) DiskStorageFactory.deleteFile -> Failed to delete file org%002ehibernate%002ecache%002e%0055pdate%0054imestamps%0043ache.index
2015-11-24 16:23:22,04015-11-24 16:23:22 DEBUG (DiskStorageFactory.java:168 LINE) DiskStorageFactory.<init> -> Matching data file missing (or empty) for index file. Deleting index file C:\Users\gqy\AppData\Local\Temp\org%002ehibernate%002ecache%002e%0055pdate%0054imestamps%0043ache.index
2015-11-24 16:23:22,04215-11-24 16:23:22 DEBUG (DiskStorageFactory.java:860 LINE) DiskStorageFactory.deleteFile -> Failed to delete file org%002ehibernate%002ecache%002e%0055pdate%0054imestamps%0043ache.index
2015-11-24 16:23:22,05515-11-24 16:23:22 DEBUG (Cache.java:1165 LINE) Cache.initialise -> Initialised cache: org.hibernate.cache.UpdateTimestampsCache
2015-11-24 16:23:22,05615-11-24 16:23:22 DEBUG (ConfigurationHelper.java:354 LINE) ConfigurationHelper.createDefaultCacheDecorators -> CacheDecoratorFactory not configured for defaultCache. Skipping for 'org.hibernate.cache.UpdateTimestampsCache'.
2015-11-24 16:23:22,05615-11-24 16:23:22 DEBUG (EhCacheProvider.java:96 LINE) EhCacheProvider.buildCache -> started EHCache region: org.hibernate.cache.UpdateTimestampsCache
2015-11-24 16:23:22,05915-11-24 16:23:22  INFO (StandardQueryCache.java:76 LINE) StandardQueryCache.<init> -> starting query cache at region: org.hibernate.cache.StandardQueryCache
2015-11-24 16:23:22,06115-11-24 16:23:22  WARN (EhCacheProvider.java:93 LINE) EhCacheProvider.buildCache -> Could not find configuration [org.hibernate.cache.StandardQueryCache]; using defaults.
2015-11-24 16:23:22,06315-11-24 16:23:22 DEBUG (MemoryStore.java:153 LINE) MemoryStore.<init> -> Initialized net.sf.ehcache.store.MemoryStore for org.hibernate.cache.StandardQueryCache
2015-11-24 16:23:22,06415-11-24 16:23:22 DEBUG (DiskStorageFactory.java:860 LINE) DiskStorageFactory.deleteFile -> Failed to delete file org%002ehibernate%002ecache%002e%0053tandard%0051uery%0043ache.data
2015-11-24 16:23:22,06515-11-24 16:23:22 DEBUG (DiskStorageFactory.java:860 LINE) DiskStorageFactory.deleteFile -> Failed to delete file org%002ehibernate%002ecache%002e%0053tandard%0051uery%0043ache.index
2015-11-24 16:23:22,06615-11-24 16:23:22 DEBUG (DiskStorageFactory.java:168 LINE) DiskStorageFactory.<init> -> Matching data file missing (or empty) for index file. Deleting index file C:\Users\gqy\AppData\Local\Temp\org%002ehibernate%002ecache%002e%0053tandard%0051uery%0043ache.index
2015-11-24 16:23:22,06715-11-24 16:23:22 DEBUG (DiskStorageFactory.java:860 LINE) DiskStorageFactory.deleteFile -> Failed to delete file org%002ehibernate%002ecache%002e%0053tandard%0051uery%0043ache.index
2015-11-24 16:23:22,06815-11-24 16:23:22 DEBUG (Cache.java:1165 LINE) Cache.initialise -> Initialised cache: org.hibernate.cache.StandardQueryCache
2015-11-24 16:23:22,06815-11-24 16:23:22 DEBUG (ConfigurationHelper.java:354 LINE) ConfigurationHelper.createDefaultCacheDecorators -> CacheDecoratorFactory not configured for defaultCache. Skipping for 'org.hibernate.cache.StandardQueryCache'.
2015-11-24 16:23:22,06815-11-24 16:23:22 DEBUG (EhCacheProvider.java:96 LINE) EhCacheProvider.buildCache -> started EHCache region: org.hibernate.cache.StandardQueryCache
2015-11-24 16:23:22,06815-11-24 16:23:22 DEBUG (SessionFactoryImpl.java:539 LINE) SessionFactoryImpl.checkNamedQueries -> Checking 0 named HQL queries
2015-11-24 16:23:22,06815-11-24 16:23:22 DEBUG (SessionFactoryImpl.java:559 LINE) SessionFactoryImpl.checkNamedQueries -> Checking 0 named SQL queries
2015-11-24 16:23:22,07015-11-24 16:23:22 DEBUG (AbstractBeanFactory.java:246 LINE) AbstractBeanFactory.doGetBean -> Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
2015-11-24 16:23:22,07115-11-24 16:23:22 DEBUG (AbstractAutowireCapableBeanFactory.java:463 LINE) AbstractAutowireCapableBeanFactory.createBean -> Finished creating instance of bean 'sessionFactory'
2015-11-24 16:23:22,07215-11-24 16:23:22 DEBUG (AbstractBeanFactory.java:246 LINE) AbstractBeanFactory.doGetBean -> Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
2015-11-24 16:23:22,08015-11-24 16:23:22 DEBUG (AbstractAutowireCapableBeanFactory.java:1529 LINE) AbstractAutowireCapableBeanFactory.invokeInitMethods -> Invoking afterPropertiesSet() on bean with name 'userOperateDao'
2015-11-24 16:23:22,08015-11-24 16:23:22 DEBUG (AbstractBeanFactory.java:246 LINE) AbstractBeanFactory.doGetBean -> Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
2015-11-24 16:23:22,08215-11-24 16:23:22 DEBUG (AbstractAutowireCapableBeanFactory.java:463 LINE) AbstractAutowireCapableBeanFactory.createBean -> Finished creating instance of bean 'userOperateDao'
2015-11-24 16:23:22,08215-11-24 16:23:22 DEBUG (DefaultSingletonBeanRegistry.java:215 LINE) DefaultSingletonBeanRegistry.getSingleton -> Creating shared instance of singleton bean 'userInterfaceDao'
2015-11-24 16:23:22,08315-11-24 16:23:22 DEBUG (AbstractAutowireCapableBeanFactory.java:435 LINE) AbstractAutowireCapableBeanFactory.createBean -> Creating instance of bean 'userInterfaceDao'
2015-11-24 16:23:22,08415-11-24 16:23:22 DEBUG (AbstractAutowireCapableBeanFactory.java:509 LINE) AbstractAutowireCapableBeanFactory.doCreateBean -> Eagerly caching bean 'userInterfaceDao' to allow for resolving potential circular references
2015-11-24 16:23:22,09015-11-24 16:23:22 DEBUG (AbstractBeanFactory.java:246 LINE) AbstractBeanFactory.doGetBean -> Returning cached instance of singleton bean 'sessionFactory'
2015-11-24 16:23:22,09015-11-24 16:23:22 DEBUG (AbstractAutowireCapableBeanFactory.java:1529 LINE) AbstractAutowireCapableBeanFactory.invokeInitMethods -> Invoking afterPropertiesSet() on bean with name 'userInterfaceDao'
2015-11-24 16:23:22,09015-11-24 16:23:22 DEBUG (AbstractBeanFactory.java:246 LINE) AbstractBeanFactory.doGetBean -> Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
2015-11-24 16:23:22,09115-11-24 16:23:22 DEBUG (AbstractAutowireCapableBeanFactory.java:463 LINE) AbstractAutowireCapableBeanFactory.createBean -> Finished creating instance of bean 'userInterfaceDao'
2015-11-24 16:23:22,09115-11-24 16:23:22 DEBUG (DefaultSingletonBeanRegistry.java:215 LINE) DefaultSingletonBeanRegistry.getSingleton -> Creating shared instance of singleton bean 'noteNumRecordDao'
2015-11-24 16:23:22,09115-11-24 16:23:22 DEBUG (AbstractAutowireCapableBeanFactory.java:435 LINE) AbstractAutowireCapableBeanFactory.createBean -> Creating instance of bean 'noteNumRecordDao'
2015-11-24 16:23:22,09215-11-24 16:23:22 DEBUG (AbstractAutowireCapableBeanFactory.java:509 LINE) AbstractAutowireCapableBeanFactory.doCreateBean -> Eagerly caching bean 'noteNumRecordDao' to allow for resolving potential circular references
2015-11-24 16:23:22,09715-11-24 16:23:22 DEBUG (AbstractBeanFactory.java:246 LINE) AbstractBeanFactory.doGetBean -> Returning cached instance of singleton bean 'sessionFactory'
2015-11-24 16:23:22,09715-11-24 16:23:22 DEBUG (AbstractAutowireCapableBeanFactory.java:1529 LINE) AbstractAutowireCapableBeanFactory.invokeInitMethods -> Invoking afterPropertiesSet() on bean with name 'noteNumRecordDao'
2015-11-24 16:23:22,09815-11-24 16:23:22 DEBUG (AbstractBeanFactory.java:246 LINE) AbstractBeanFactory.doGetBean -> Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
2015-11-24 16:23:22,09915-11-24 16:23:22 DEBUG (AbstractAutowireCapableBeanFactory.java:463 LINE) AbstractAutowireCapableBeanFactory.createBean -> Finished creating instance of bean 'noteNumRecordDao'
2015-11-24 16:23:22,09915-11-24 16:23:22 DEBUG (DefaultSingletonBeanRegistry.java:215 LINE) DefaultSingletonBeanRegistry.getSingleton -> Creating shared instance of singleton bean 'crashLogDao'
2015-11-24 16:23:22,09915-11-24 16:23:22 DEBUG (AbstractAutowireCapableBeanFactory.java:435 LINE) AbstractAutowireCapableBeanFactory.createBean -> Creating instance of bean 'crashLogDao'
2015-11-24 16:23:22,10015-11-24 16:23:22 DEBUG (AbstractAutowireCapableBeanFactory.java:509 LINE) AbstractAutowireCapableBeanFactory.doCreateBean -> Eagerly caching bean 'crashLogDao' to allow for resolving potential circular references
2015-11-24 16:23:22,13515-11-24 16:23:22 DEBUG (AbstractBeanFactory.java:246 LINE) AbstractBeanFactory.doGetBean -> Returning cached instance of singleton bean 'sessionFactory'
2015-11-24 16:23:22,13615-11-24 16:23:22 DEBUG (AbstractAutowireCapableBeanFactory.java:1529 LINE) AbstractAutowireCapableBeanFactory.invokeInitMethods -> Invoking afterPropertiesSet() on bean with name 'crashLogDao'
2015-11-24 16:23:22,13715-11-24 16:23:22 DEBUG (AbstractBeanFactory.java:246 LINE) AbstractBeanFactory.doGetBean -> Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
2015-11-24 16:23:22,13715-11-24 16:23:22 DEBUG (AbstractAutowireCapableBeanFactory.java:463 LINE) AbstractAutowireCapableBeanFactory.createBean -> Finished creating instance of bean 'crashLogDao'
2015-11-24 16:23:22,13815-11-24 16:23:22 DEBUG (AbstractBeanFactory.java:246 LINE) AbstractBeanFactory.doGetBean -> Returning cached instance of singleton bean 'dataSource'
2015-11-24 16:23:22,13815-11-24 16:23:22 DEBUG (AbstractBeanFactory.java:246 LINE) AbstractBeanFactory.doGetBean -> Returning cached instance of singleton bean 'org.springframework.aop.config.internalAutoProxyCreator'
2015-11-24 16:23:22,13815-11-24 16:23:22 DEBUG (AbstractBeanFactory.java:246 LINE) AbstractBeanFactory.doGetBean -> Returning cached instance of singleton bean 'org.springframework.transaction.annotation.AnnotationTransactionAttributeSource#0'
2015-11-24 16:23:22,13815-11-24 16:23:22 DEBUG (DefaultSingletonBeanRegistry.java:215 LINE) DefaultSingletonBeanRegistry.getSingleton -> Creating shared instance of singleton bean 'org.springframework.transaction.interceptor.TransactionInterceptor#0'
2015-11-24 16:23:22,13815-11-24 16:23:22 DEBUG (AbstractAutowireCapableBeanFactory.java:435 LINE) AbstractAutowireCapableBeanFactory.createBean -> Creating instance of bean 'org.springframework.transaction.interceptor.TransactionInterceptor#0'
2015-11-24 16:23:22,14115-11-24 16:23:22 DEBUG (AbstractAutowireCapableBeanFactory.java:509 LINE) AbstractAutowireCapableBeanFactory.doCreateBean -> Eagerly caching bean 'org.springframework.transaction.interceptor.TransactionInterceptor#0' to allow for resolving potential circular references
2015-11-24 16:23:22,14615-11-24 16:23:22 DEBUG (AbstractBeanFactory.java:246 LINE) AbstractBeanFactory.doGetBean -> Returning cached instance of singleton bean 'org.springframework.transaction.annotation.AnnotationTransactionAttributeSource#0'
2015-11-24 16:23:22,14715-11-24 16:23:22 DEBUG (AbstractAutowireCapableBeanFactory.java:1529 LINE) AbstractAutowireCapableBeanFactory.invokeInitMethods -> Invoking afterPropertiesSet() on bean with name 'org.springframework.transaction.interceptor.TransactionInterceptor#0'
2015-11-24 16:23:22,14715-11-24 16:23:22 DEBUG (AbstractAutowireCapableBeanFactory.java:463 LINE) AbstractAutowireCapableBeanFactory.createBean -> Finished creating instance of bean 'org.springframework.transaction.interceptor.TransactionInterceptor#0'
2015-11-24 16:23:22,14715-11-24 16:23:22 DEBUG (AbstractBeanFactory.java:246 LINE) AbstractBeanFactory.doGetBean -> Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
2015-11-24 16:23:22,14715-11-24 16:23:22 DEBUG (DefaultSingletonBeanRegistry.java:215 LINE) DefaultSingletonBeanRegistry.getSingleton -> Creating shared instance of singleton bean 'transactionManager'
2015-11-24 16:23:22,14715-11-24 16:23:22 DEBUG (AbstractAutowireCapableBeanFactory.java:435 LINE) AbstractAutowireCapableBeanFactory.createBean -> Creating instance of bean 'transactionManager'
2015-11-24 16:23:22,18915-11-24 16:23:22 DEBUG (AbstractAutowireCapableBeanFactory.java:509 LINE) AbstractAutowireCapableBeanFactory.doCreateBean -> Eagerly caching bean 'transactionManager' to allow for resolving potential circular references
2015-11-24 16:23:22,19515-11-24 16:23:22 DEBUG (AbstractBeanFactory.java:246 LINE) AbstractBeanFactory.doGetBean -> Returning cached instance of singleton bean 'sessionFactory'
2015-11-24 16:23:22,19615-11-24 16:23:22 DEBUG (AbstractAutowireCapableBeanFactory.java:1529 LINE) AbstractAutowireCapableBeanFactory.invokeInitMethods -> Invoking afterPropertiesSet() on bean with name 'transactionManager'
2015-11-24 16:23:22,20315-11-24 16:23:22  INFO (HibernateTransactionManager.java:415 LINE) HibernateTransactionManager.afterPropertiesSet -> Using DataSource [org.apache.commons.dbcp.BasicDataSource@43c338ec] of Hibernate SessionFactory for HibernateTransactionManager
2015-11-24 16:23:22,20415-11-24 16:23:22 DEBUG (AbstractBeanFactory.java:246 LINE) AbstractBeanFactory.doGetBean -> Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
2015-11-24 16:23:22,20515-11-24 16:23:22 DEBUG (AbstractAutowireCapableBeanFactory.java:463 LINE) AbstractAutowireCapableBeanFactory.createBean -> Finished creating instance of bean 'transactionManager'
2015-11-24 16:23:22,20515-11-24 16:23:22 DEBUG (AbstractBeanFactory.java:246 LINE) AbstractBeanFactory.doGetBean -> Returning cached instance of singleton bean 'org.springframework.context.annotation.internalConfigurationAnnotationProcessor'
2015-11-24 16:23:22,20515-11-24 16:23:22 DEBUG (AbstractBeanFactory.java:246 LINE) AbstractBeanFactory.doGetBean -> Returning cached instance of singleton bean 'org.springframework.context.annotation.internalAutowiredAnnotationProcessor'
2015-11-24 16:23:22,20615-11-24 16:23:22 DEBUG (AbstractBeanFactory.java:246 LINE) AbstractBeanFactory.doGetBean -> Returning cached instance of singleton bean 'org.springframework.context.annotation.internalRequiredAnnotationProcessor'
2015-11-24 16:23:22,20615-11-24 16:23:22 DEBUG (AbstractBeanFactory.java:246 LINE) AbstractBeanFactory.doGetBean -> Returning cached instance of singleton bean 'org.springframework.context.annotation.internalCommonAnnotationProcessor'
2015-11-24 16:23:22,20615-11-24 16:23:22 DEBUG (AbstractBeanFactory.java:246 LINE) AbstractBeanFactory.doGetBean -> Returning cached instance of singleton bean 'org.springframework.context.annotation.internalPersistenceAnnotationProcessor'
2015-11-24 16:23:22,20615-11-24 16:23:22 DEBUG (DefaultSingletonBeanRegistry.java:215 LINE) DefaultSingletonBeanRegistry.getSingleton -> Creating shared instance of singleton bean 'operateService'
2015-11-24 16:23:22,20615-11-24 16:23:22 DEBUG (AbstractAutowireCapableBeanFactory.java:435 LINE) AbstractAutowireCapableBeanFactory.createBean -> Creating instance of bean 'operateService'
2015-11-24 16:23:22,21415-11-24 16:23:22 DEBUG (InjectionMetadata.java:71 LINE) InjectionMetadata.checkConfigMembers -> Registered injected element on class [com.fx.mobile.user.service.impl.UserOperateServiceImp]: AutowiredFieldElement for public com.fx.mobile.user.dao.UserOperateDao com.fx.mobile.user.service.impl.UserOperateServiceImp.userOperateDao
2015-11-24 16:23:22,21515-11-24 16:23:22 DEBUG (AbstractAutowireCapableBeanFactory.java:509 LINE) AbstractAutowireCapableBeanFactory.doCreateBean -> Eagerly caching bean 'operateService' to allow for resolving potential circular references
2015-11-24 16:23:22,21715-11-24 16:23:22 DEBUG (InjectionMetadata.java:85 LINE) InjectionMetadata.inject -> Processing injected method of bean 'operateService': AutowiredFieldElement for public com.fx.mobile.user.dao.UserOperateDao com.fx.mobile.user.service.impl.UserOperateServiceImp.userOperateDao
2015-11-24 16:23:22,23315-11-24 16:23:22 DEBUG (DefaultSingletonBeanRegistry.java:215 LINE) DefaultSingletonBeanRegistry.getSingleton -> Creating shared instance of singleton bean 'fileRemote'
2015-11-24 16:23:22,23415-11-24 16:23:22 DEBUG (AbstractAutowireCapableBeanFactory.java:435 LINE) AbstractAutowireCapableBeanFactory.createBean -> Creating instance of bean 'fileRemote'
2015-11-24 16:23:22,23715-11-24 16:23:22 DEBUG (AbstractAutowireCapableBeanFactory.java:509 LINE) AbstractAutowireCapableBeanFactory.doCreateBean -> Eagerly caching bean 'fileRemote' to allow for resolving potential circular references
2015-11-24 16:23:22,25115-11-24 16:23:22 DEBUG (AbstractAutowireCapableBeanFactory.java:1529 LINE) AbstractAutowireCapableBeanFactory.invokeInitMethods -> Invoking afterPropertiesSet() on bean with name 'fileRemote'
2015-11-24 16:23:22,26415-11-24 16:23:22 DEBUG (JdkDynamicAopProxy.java:115 LINE) JdkDynamicAopProxy.getProxy -> Creating JDK dynamic proxy: target source is EmptyTargetSource: no target class, static
2015-11-24 16:23:22,26915-11-24 16:23:22 DEBUG (AbstractAutowireCapableBeanFactory.java:463 LINE) AbstractAutowireCapableBeanFactory.createBean -> Finished creating instance of bean 'fileRemote'
2015-11-24 16:23:22,27015-11-24 16:23:22 DEBUG (AbstractBeanFactory.java:246 LINE) AbstractBeanFactory.doGetBean -> Returning cached instance of singleton bean 'userOperateDao'
2015-11-24 16:23:22,27015-11-24 16:23:22 DEBUG (AutowiredAnnotationBeanPostProcessor.java:433 LINE) AutowiredAnnotationBeanPostProcessor.registerDependentBeans -> Autowiring by type from bean name 'operateService' to bean named 'userOperateDao'
2015-11-24 16:23:22,27015-11-24 16:23:22 DEBUG (AbstractBeanFactory.java:246 LINE) AbstractBeanFactory.doGetBean -> Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
2015-11-24 16:23:22,27515-11-24 16:23:22 DEBUG (AbstractFallbackTransactionAttributeSource.java:106 LINE) AbstractFallbackTransactionAttributeSource.getTransactionAttribute -> Adding transactional method 'registAccount' with attribute: PROPAGATION_REQUIRED,ISOLATION_DEFAULT; '',-java.lang.Throwable
2015-11-24 16:23:22,27615-11-24 16:23:22 DEBUG (AbstractAutoProxyCreator.java:534 LINE) AbstractAutoProxyCreator.buildAdvisors -> Creating implicit proxy for bean 'operateService' with 0 common interceptors and 1 specific interceptors
2015-11-24 16:23:22,27715-11-24 16:23:22 DEBUG (JdkDynamicAopProxy.java:115 LINE) JdkDynamicAopProxy.getProxy -> Creating JDK dynamic proxy: target source is SingletonTargetSource for target object [com.fx.mobile.user.service.impl.UserOperateServiceImp@742e4245]
2015-11-24 16:23:22,29015-11-24 16:23:22 DEBUG (AbstractAutowireCapableBeanFactory.java:463 LINE) AbstractAutowireCapableBeanFactory.createBean -> Finished creating instance of bean 'operateService'
2015-11-24 16:23:22,29015-11-24 16:23:22 DEBUG (DefaultSingletonBeanRegistry.java:215 LINE) DefaultSingletonBeanRegistry.getSingleton -> Creating shared instance of singleton bean 'SpringContextUtil'
2015-11-24 16:23:22,29915-11-24 16:23:22 DEBUG (AbstractAutowireCapableBeanFactory.java:435 LINE) AbstractAutowireCapableBeanFactory.createBean -> Creating instance of bean 'SpringContextUtil'
2015-11-24 16:23:22,30015-11-24 16:23:22 DEBUG (AbstractAutowireCapableBeanFactory.java:509 LINE) AbstractAutowireCapableBeanFactory.doCreateBean -> Eagerly caching bean 'SpringContextUtil' to allow for resolving potential circular references
2015-11-24 16:23:22,32315-11-24 16:23:22 DEBUG (AbstractBeanFactory.java:246 LINE) AbstractBeanFactory.doGetBean -> Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
2015-11-24 16:23:22,32415-11-24 16:23:22 DEBUG (AbstractAutowireCapableBeanFactory.java:463 LINE) AbstractAutowireCapableBeanFactory.createBean -> Finished creating instance of bean 'SpringContextUtil'
2015-11-24 16:23:22,32415-11-24 16:23:22 DEBUG (AbstractBeanFactory.java:246 LINE) AbstractBeanFactory.doGetBean -> Returning cached instance of singleton bean 'fileRemote'
2015-11-24 16:23:22,32515-11-24 16:23:22 DEBUG (AbstractBeanFactory.java:246 LINE) AbstractBeanFactory.doGetBean -> Returning cached instance of singleton bean 'corePropertyConfigurer'
2015-11-24 16:23:22,32515-11-24 16:23:22 DEBUG (DefaultSingletonBeanRegistry.java:215 LINE) DefaultSingletonBeanRegistry.getSingleton -> Creating shared instance of singleton bean 'userinterfaceService'
2015-11-24 16:23:22,32515-11-24 16:23:22 DEBUG (AbstractAutowireCapableBeanFactory.java:435 LINE) AbstractAutowireCapableBeanFactory.createBean -> Creating instance of bean 'userinterfaceService'
2015-11-24 16:23:22,32615-11-24 16:23:22 DEBUG (InjectionMetadata.java:71 LINE) InjectionMetadata.checkConfigMembers -> Registered injected element on class [com.fx.mobile.user.service.impl.UserInterfaceServiceImpl]: AutowiredFieldElement for public com.fx.mobile.user.dao.UserInterfaceDao com.fx.mobile.user.service.impl.UserInterfaceServiceImpl.userInterfaceDao
2015-11-24 16:23:22,32615-11-24 16:23:22 DEBUG (AbstractAutowireCapableBeanFactory.java:509 LINE) AbstractAutowireCapableBeanFactory.doCreateBean -> Eagerly caching bean 'userinterfaceService' to allow for resolving potential circular references
2015-11-24 16:23:22,32915-11-24 16:23:22 DEBUG (InjectionMetadata.java:85 LINE) InjectionMetadata.inject -> Processing injected method of bean 'userinterfaceService': AutowiredFieldElement for public com.fx.mobile.user.dao.UserInterfaceDao com.fx.mobile.user.service.impl.UserInterfaceServiceImpl.userInterfaceDao
2015-11-24 16:23:22,33415-11-24 16:23:22 DEBUG (AbstractBeanFactory.java:246 LINE) AbstractBeanFactory.doGetBean -> Returning cached instance of singleton bean 'userInterfaceDao'
2015-11-24 16:23:22,33415-11-24 16:23:22 DEBUG (AutowiredAnnotationBeanPostProcessor.java:433 LINE) AutowiredAnnotationBeanPostProcessor.registerDependentBeans -> Autowiring by type from bean name 'userinterfaceService' to bean named 'userInterfaceDao'
2015-11-24 16:23:22,33515-11-24 16:23:22 DEBUG (AbstractBeanFactory.java:246 LINE) AbstractBeanFactory.doGetBean -> Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
2015-11-24 16:23:22,33615-11-24 16:23:22 DEBUG (AbstractAutowireCapableBeanFactory.java:463 LINE) AbstractAutowireCapableBeanFactory.createBean -> Finished creating instance of bean 'userinterfaceService'
2015-11-24 16:23:22,33615-11-24 16:23:22 DEBUG (DefaultSingletonBeanRegistry.java:215 LINE) DefaultSingletonBeanRegistry.getSingleton -> Creating shared instance of singleton bean 'urlProperties'
2015-11-24 16:23:22,33615-11-24 16:23:22 DEBUG (AbstractAutowireCapableBeanFactory.java:435 LINE) AbstractAutowireCapableBeanFactory.createBean -> Creating instance of bean 'urlProperties'
2015-11-24 16:23:22,33715-11-24 16:23:22 DEBUG (AbstractAutowireCapableBeanFactory.java:509 LINE) AbstractAutowireCapableBeanFactory.doCreateBean -> Eagerly caching bean 'urlProperties' to allow for resolving potential circular references
2015-11-24 16:23:22,34515-11-24 16:23:22 DEBUG (AbstractBeanFactory.java:246 LINE) AbstractBeanFactory.doGetBean -> Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
2015-11-24 16:23:22,34615-11-24 16:23:22 DEBUG (AbstractAutowireCapableBeanFactory.java:463 LINE) AbstractAutowireCapableBeanFactory.createBean -> Finished creating instance of bean 'urlProperties'
2015-11-24 16:23:22,34615-11-24 16:23:22 DEBUG (AbstractBeanFactory.java:246 LINE) AbstractBeanFactory.doGetBean -> Returning cached instance of singleton bean 'org.springframework.context.annotation.ConfigurationClassPostProcessor.importAwareProcessor'
2015-11-24 16:23:22,34915-11-24 16:23:22 DEBUG (AbstractApplicationContext.java:858 LINE) AbstractApplicationContext.initLifecycleProcessor -> Unable to locate LifecycleProcessor with name 'lifecycleProcessor': using default [org.springframework.context.support.DefaultLifecycleProcessor@467d4373]
2015-11-24 16:23:22,34915-11-24 16:23:22 DEBUG (AbstractBeanFactory.java:246 LINE) AbstractBeanFactory.doGetBean -> Returning cached instance of singleton bean 'lifecycleProcessor'
2015-11-24 16:23:22,35315-11-24 16:23:22 DEBUG (PropertySourcesPropertyResolver.java:70 LINE) PropertySourcesPropertyResolver.getProperty -> Searching for key 'spring.liveBeansView.mbeanDomain' in [systemProperties]
2015-11-24 16:23:22,36115-11-24 16:23:22 DEBUG (PropertySourcesPropertyResolver.java:70 LINE) PropertySourcesPropertyResolver.getProperty -> Searching for key 'spring.liveBeansView.mbeanDomain' in [systemEnvironment]
2015-11-24 16:23:22,36315-11-24 16:23:22 DEBUG (PropertySourcesPropertyResolver.java:93 LINE) PropertySourcesPropertyResolver.getProperty -> Could not find key 'spring.liveBeansView.mbeanDomain' in any property source. Returning [null]
2015-11-24 16:23:22,36315-11-24 16:23:22 DEBUG (CacheAwareContextLoaderDelegate.java:93 LINE) CacheAwareContextLoaderDelegate.loadContext -> Storing ApplicationContext in cache under key [[MergedContextConfiguration@7ce6de16 testClass = UserOperateDaoImplTest, locations = '{classpath*:context/*-context.xml}', classes = '{}', contextInitializerClasses = '[]', activeProfiles = '{}', contextLoader = 'org.springframework.test.context.support.DelegatingSmartContextLoader', parent = [null]]].
2015-11-24 16:23:22,37315-11-24 16:23:22 DEBUG (InjectionMetadata.java:85 LINE) InjectionMetadata.inject -> Processing injected method of bean 'com.fx.mobile.junit.UserOperateDaoImplTest': ResourceElement for com.fx.mobile.user.dao.UserOperateDao com.fx.mobile.junit.UserOperateDaoImplTest.userOperateDao
2015-11-24 16:23:22,37315-11-24 16:23:22 DEBUG (AbstractBeanFactory.java:246 LINE) AbstractBeanFactory.doGetBean -> Returning cached instance of singleton bean 'userOperateDao'
2015-11-24 16:23:22,37415-11-24 16:23:22 DEBUG (AbstractBeanFactory.java:246 LINE) AbstractBeanFactory.doGetBean -> Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
2015-11-24 16:23:22,38215-11-24 16:23:22 DEBUG (SessionFactoryUtils.java:322 LINE) SessionFactoryUtils.doGetSession -> Opening Hibernate Session
2015-11-24 16:23:22,42115-11-24 16:23:22 DEBUG (SessionImpl.java:265 LINE) SessionImpl.<init> -> opened session at timestamp: 5932455536160768
2015-11-24 16:23:22,52515-11-24 16:23:22 DEBUG (QueryTranslatorImpl.java:274 LINE) QueryTranslatorImpl.parse -> parse() - HQL: from com.fx.mobile.model.UserOperate where userPhoneNumb=? or userName=?  or userEmail=?
2015-11-24 16:23:22,54515-11-24 16:23:22 DEBUG (QueryTranslatorImpl.java:293 LINE) QueryTranslatorImpl.showHqlAst -> --- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        \-[DOT] Node: '.'
    |           +-[DOT] Node: '.'
    |           |  +-[DOT] Node: '.'
    |           |  |  +-[DOT] Node: '.'
    |           |  |  |  +-[IDENT] Node: 'com'
    |           |  |  |  \-[IDENT] Node: 'fx'
    |           |  |  \-[IDENT] Node: 'mobile'
    |           |  \-[IDENT] Node: 'model'
    |           \-[IDENT] Node: 'UserOperate'
    \-[WHERE] Node: 'where'
       \-[OR] Node: 'or'
          +-[OR] Node: 'or'
          |  +-[EQ] Node: '='
          |  |  +-[IDENT] Node: 'userPhoneNumb'
          |  |  \-[PARAM] Node: '?'
          |  \-[EQ] Node: '='
          |     +-[IDENT] Node: 'userName'
          |     \-[PARAM] Node: '?'
          \-[EQ] Node: '='
             +-[IDENT] Node: 'userEmail'
             \-[PARAM] Node: '?'

2015-11-24 16:23:22,54615-11-24 16:23:22 DEBUG (ErrorCounter.java:91 LINE) ErrorCounter.throwQueryException -> throwQueryException() : no errors
2015-11-24 16:23:22,59415-11-24 16:23:22 DEBUG (HqlSqlBaseWalker.java:111 LINE) HqlSqlBaseWalker.beforeStatement -> select << begin [level=1, statement=select]
2015-11-24 16:23:22,64715-11-24 16:23:22 DEBUG (FromElement.java:157 LINE) FromElement.doInitialize -> FromClause{level=1} :  com.fx.mobile.model.UserOperate (no alias) -> useroperat0_
2015-11-24 16:23:22,65015-11-24 16:23:22 DEBUG (FromReferenceNode.java:74 LINE) FromReferenceNode.setResolved -> Resolved :  {synthetic-alias} -> {synthetic-alias}
2015-11-24 16:23:22,65115-11-24 16:23:22 DEBUG (DotNode.java:613 LINE) DotNode.getDataType -> getDataType() : userPhoneNumb -> org.hibernate.type.StringType@4564886c
2015-11-24 16:23:22,65315-11-24 16:23:22 DEBUG (FromReferenceNode.java:74 LINE) FromReferenceNode.setResolved -> Resolved :  {synthetic-alias}.userPhoneNumb -> useroperat0_.user_PhoneNumb
2015-11-24 16:23:22,65615-11-24 16:23:22 DEBUG (FromReferenceNode.java:74 LINE) FromReferenceNode.setResolved -> Resolved :  {synthetic-alias} -> {synthetic-alias}
2015-11-24 16:23:22,65615-11-24 16:23:22 DEBUG (DotNode.java:613 LINE) DotNode.getDataType -> getDataType() : userName -> org.hibernate.type.StringType@4564886c
2015-11-24 16:23:22,65715-11-24 16:23:22 DEBUG (FromReferenceNode.java:74 LINE) FromReferenceNode.setResolved -> Resolved :  {synthetic-alias}.userName -> useroperat0_.userName
2015-11-24 16:23:22,65715-11-24 16:23:22 DEBUG (FromReferenceNode.java:74 LINE) FromReferenceNode.setResolved -> Resolved :  {synthetic-alias} -> {synthetic-alias}
2015-11-24 16:23:22,65715-11-24 16:23:22 DEBUG (DotNode.java:613 LINE) DotNode.getDataType -> getDataType() : userEmail -> org.hibernate.type.StringType@4564886c
2015-11-24 16:23:22,65715-11-24 16:23:22 DEBUG (FromReferenceNode.java:74 LINE) FromReferenceNode.setResolved -> Resolved :  {synthetic-alias}.userEmail -> useroperat0_.userEmail
2015-11-24 16:23:22,65815-11-24 16:23:22 DEBUG (HqlSqlBaseWalker.java:117 LINE) HqlSqlBaseWalker.beforeStatementCompletion -> select : finishing up [level=1, statement=select]
2015-11-24 16:23:22,65815-11-24 16:23:22 DEBUG (HqlSqlWalker.java:625 LINE) HqlSqlWalker.processQuery -> processQuery() :  ( SELECT ( FromClause{level=1} user_operate useroperat0_ ) ( where ( or ( or ( = ( useroperat0_.user_PhoneNumb {synthetic-alias} userPhoneNumb ) ? ) ( = ( useroperat0_.userName {synthetic-alias} userName ) ? ) ) ( = ( useroperat0_.userEmail {synthetic-alias} userEmail ) ? ) ) ) )
2015-11-24 16:23:22,66515-11-24 16:23:22 DEBUG (HqlSqlWalker.java:868 LINE) HqlSqlWalker.createSelectClauseFromFromClause -> Derived SELECT clause created.
2015-11-24 16:23:22,66915-11-24 16:23:22 DEBUG (JoinProcessor.java:179 LINE) JoinProcessor.addJoinNodes -> Using FROM fragment [user_operate useroperat0_]
2015-11-24 16:23:22,66915-11-24 16:23:22 DEBUG (HqlSqlBaseWalker.java:123 LINE) HqlSqlBaseWalker.afterStatementCompletion -> select >> end [level=1, statement=select]
2015-11-24 16:23:22,67015-11-24 16:23:22 DEBUG (QueryTranslatorImpl.java:260 LINE) QueryTranslatorImpl.analyze -> --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (user_operate)
    +-[SELECT_CLAUSE] SelectClause: '{derived select clause}'
    |  +-[SELECT_EXPR] SelectExpressionImpl: 'useroperat0_.id as id0_' {FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=user_operate,tableAlias=useroperat0_,origin=null,columns={,className=com.fx.mobile.model.UserOperate}}}
    |  \-[SQL_TOKEN] SqlFragment: 'useroperat0_.userName as userName0_, useroperat0_.userPassword as userPass3_0_, useroperat0_.phicomm_id as phicomm4_0_, useroperat0_.userEmail as userEmail0_, useroperat0_.user_PhoneNumb as user6_0_, useroperat0_.userType as userType0_, useroperat0_.isChecked as isChecked0_, useroperat0_.nickname as nickname0_, useroperat0_.figureurl as figureurl0_, useroperat0_.sex as sex0_, useroperat0_.province as province0_, useroperat0_.city as city0_, useroperat0_.birthday as birthday0_, useroperat0_.open_id as open15_0_, useroperat0_.open_key as open16_0_, useroperat0_.access_token as access17_0_, useroperat0_.expirese_in as expirese18_0_, useroperat0_.devinfo as devinfo0_, useroperat0_.userinfo as userinfo0_, useroperat0_.openqq as openqq0_, useroperat0_.openqqinfo as openqqinfo0_, useroperat0_.opensina as opensina0_, useroperat0_.opensinainfo as opensin24_0_, useroperat0_.createTime as createTime0_, useroperat0_.updateTime as updateTime0_, useroperat0_.lastLoginTime as lastLog27_0_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[], fromElementByTableAlias=[useroperat0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'user_operate useroperat0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=user_operate,tableAlias=useroperat0_,origin=null,columns={,className=com.fx.mobile.model.UserOperate}}
    \-[WHERE] SqlNode: 'where'
       \-[OR] SqlNode: 'or'
          +-[OR] SqlNode: 'or'
          |  +-[EQ] BinaryLogicOperatorNode: '='
          |  |  +-[DOT] DotNode: 'useroperat0_.user_PhoneNumb' {propertyName=userPhoneNumb,dereferenceType=ALL,propertyPath=userPhoneNumb,path={synthetic-alias}.userPhoneNumb,tableAlias=useroperat0_,className=com.fx.mobile.model.UserOperate,classAlias=null}
          |  |  |  +-[IDENT] IdentNode: '{synthetic-alias}' {originalText={synthetic-alias}}
          |  |  |  \-[IDENT] IdentNode: 'userPhoneNumb' {originalText=userPhoneNumb}
          |  |  \-[PARAM] ParameterNode: '?' {ordinal=0, expectedType=org.hibernate.type.StringType@4564886c}
          |  \-[EQ] BinaryLogicOperatorNode: '='
          |     +-[DOT] DotNode: 'useroperat0_.userName' {propertyName=userName,dereferenceType=ALL,propertyPath=userName,path={synthetic-alias}.userName,tableAlias=useroperat0_,className=com.fx.mobile.model.UserOperate,classAlias=null}
          |     |  +-[IDENT] IdentNode: '{synthetic-alias}' {originalText={synthetic-alias}}
          |     |  \-[IDENT] IdentNode: 'userName' {originalText=userName}
          |     \-[PARAM] ParameterNode: '?' {ordinal=1, expectedType=org.hibernate.type.StringType@4564886c}
          \-[EQ] BinaryLogicOperatorNode: '='
             +-[DOT] DotNode: 'useroperat0_.userEmail' {propertyName=userEmail,dereferenceType=ALL,propertyPath=userEmail,path={synthetic-alias}.userEmail,tableAlias=useroperat0_,className=com.fx.mobile.model.UserOperate,classAlias=null}
             |  +-[IDENT] IdentNode: '{synthetic-alias}' {originalText={synthetic-alias}}
             |  \-[IDENT] IdentNode: 'userEmail' {originalText=userEmail}
             \-[PARAM] ParameterNode: '?' {ordinal=2, expectedType=org.hibernate.type.StringType@4564886c}

2015-11-24 16:23:22,67115-11-24 16:23:22 DEBUG (ErrorCounter.java:91 LINE) ErrorCounter.throwQueryException -> throwQueryException() : no errors
2015-11-24 16:23:22,68215-11-24 16:23:22 DEBUG (QueryTranslatorImpl.java:243 LINE) QueryTranslatorImpl.generate -> HQL: from com.fx.mobile.model.UserOperate where userPhoneNumb=? or userName=?  or userEmail=?
2015-11-24 16:23:22,68215-11-24 16:23:22 DEBUG (QueryTranslatorImpl.java:244 LINE) QueryTranslatorImpl.generate -> SQL: select useroperat0_.id as id0_, useroperat0_.userName as userName0_, useroperat0_.userPassword as userPass3_0_, useroperat0_.phicomm_id as phicomm4_0_, useroperat0_.userEmail as userEmail0_, useroperat0_.user_PhoneNumb as user6_0_, useroperat0_.userType as userType0_, useroperat0_.isChecked as isChecked0_, useroperat0_.nickname as nickname0_, useroperat0_.figureurl as figureurl0_, useroperat0_.sex as sex0_, useroperat0_.province as province0_, useroperat0_.city as city0_, useroperat0_.birthday as birthday0_, useroperat0_.open_id as open15_0_, useroperat0_.open_key as open16_0_, useroperat0_.access_token as access17_0_, useroperat0_.expirese_in as expirese18_0_, useroperat0_.devinfo as devinfo0_, useroperat0_.userinfo as userinfo0_, useroperat0_.openqq as openqq0_, useroperat0_.openqqinfo as openqqinfo0_, useroperat0_.opensina as opensina0_, useroperat0_.opensinainfo as opensin24_0_, useroperat0_.createTime as createTime0_, useroperat0_.updateTime as updateTime0_, useroperat0_.lastLoginTime as lastLog27_0_ from user_operate useroperat0_ where useroperat0_.user_PhoneNumb=? or useroperat0_.userName=? or useroperat0_.userEmail=?
2015-11-24 16:23:22,68315-11-24 16:23:22 DEBUG (ErrorCounter.java:91 LINE) ErrorCounter.throwQueryException -> throwQueryException() : no errors
2015-11-24 16:23:22,70115-11-24 16:23:22 DEBUG (AbstractBatcher.java:410 LINE) AbstractBatcher.logOpenPreparedStatement -> about to open PreparedStatement (open PreparedStatements: 0, globally: 0)
2015-11-24 16:23:22,70115-11-24 16:23:22 DEBUG (ConnectionManager.java:444 LINE) ConnectionManager.openConnection -> opening JDBC connection
2015-11-24 16:23:22,70315-11-24 16:23:22 DEBUG (SQLStatementLogger.java:111 LINE) SQLStatementLogger.logStatement -> 
    select
        useroperat0_.id as id0_,
        useroperat0_.userName as userName0_,
        useroperat0_.userPassword as userPass3_0_,
        useroperat0_.phicomm_id as phicomm4_0_,
        useroperat0_.userEmail as userEmail0_,
        useroperat0_.user_PhoneNumb as user6_0_,
        useroperat0_.userType as userType0_,
        useroperat0_.isChecked as isChecked0_,
        useroperat0_.nickname as nickname0_,
        useroperat0_.figureurl as figureurl0_,
        useroperat0_.sex as sex0_,
        useroperat0_.province as province0_,
        useroperat0_.city as city0_,
        useroperat0_.birthday as birthday0_,
        useroperat0_.open_id as open15_0_,
        useroperat0_.open_key as open16_0_,
        useroperat0_.access_token as access17_0_,
        useroperat0_.expirese_in as expirese18_0_,
        useroperat0_.devinfo as devinfo0_,
        useroperat0_.userinfo as userinfo0_,
        useroperat0_.openqq as openqq0_,
        useroperat0_.openqqinfo as openqqinfo0_,
        useroperat0_.opensina as opensina0_,
        useroperat0_.opensinainfo as opensin24_0_,
        useroperat0_.createTime as createTime0_,
        useroperat0_.updateTime as updateTime0_,
        useroperat0_.lastLoginTime as lastLog27_0_ 
    from
        user_operate useroperat0_ 
    where
        useroperat0_.user_PhoneNumb=? 
        or useroperat0_.userName=? 
        or useroperat0_.userEmail=?
2015-11-24 16:23:22,71715-11-24 16:23:22 DEBUG (AbstractBatcher.java:426 LINE) AbstractBatcher.logOpenResults -> about to open ResultSet (open ResultSets: 0, globally: 0)
2015-11-24 16:23:22,72315-11-24 16:23:22 DEBUG (Loader.java:1322 LINE) Loader.getRow -> result row: EntityKey[com.fx.mobile.model.UserOperate#2]
2015-11-24 16:23:22,73415-11-24 16:23:22 DEBUG (AbstractBatcher.java:433 LINE) AbstractBatcher.logCloseResults -> about to close ResultSet (open ResultSets: 1, globally: 1)
2015-11-24 16:23:22,73415-11-24 16:23:22 DEBUG (AbstractBatcher.java:418 LINE) AbstractBatcher.logClosePreparedStatement -> about to close PreparedStatement (open PreparedStatements: 1, globally: 1)
2015-11-24 16:23:22,73515-11-24 16:23:22 DEBUG (ConnectionManager.java:427 LINE) ConnectionManager.aggressiveRelease -> aggressively releasing JDBC connection
2015-11-24 16:23:22,73515-11-24 16:23:22 DEBUG (ConnectionManager.java:464 LINE) ConnectionManager.closeConnection -> releasing JDBC connection [ (open PreparedStatements: 0, globally: 0) (open ResultSets: 0, globally: 0)]
2015-11-24 16:23:22,73715-11-24 16:23:22 DEBUG (TwoPhaseLoad.java:130 LINE) TwoPhaseLoad.initializeEntity -> resolving associations for [com.fx.mobile.model.UserOperate#2]
2015-11-24 16:23:22,74115-11-24 16:23:22 DEBUG (TwoPhaseLoad.java:255 LINE) TwoPhaseLoad.initializeEntity -> done materializing entity [com.fx.mobile.model.UserOperate#2]
2015-11-24 16:23:22,74215-11-24 16:23:22 DEBUG (StatefulPersistenceContext.java:893 LINE) StatefulPersistenceContext.initializeNonLazyCollections -> initializing non-lazy collections
2015-11-24 16:23:22,74615-11-24 16:23:22 DEBUG (ConnectionManager.java:427 LINE) ConnectionManager.aggressiveRelease -> aggressively releasing JDBC connection
2015-11-24 16:23:22,74615-11-24 16:23:22 DEBUG (HibernateAccessor.java:389 LINE) HibernateAccessor.flushIfNecessary -> Eagerly flushing Hibernate session
2015-11-24 16:23:22,74815-11-24 16:23:22 DEBUG (AbstractFlushingEventListener.java:134 LINE) AbstractFlushingEventListener.prepareEntityFlushes -> processing flush-time cascades
2015-11-24 16:23:22,76915-11-24 16:23:22 DEBUG (AbstractFlushingEventListener.java:177 LINE) AbstractFlushingEventListener.prepareCollectionFlushes -> dirty checking collections
2015-11-24 16:23:22,78115-11-24 16:23:22 DEBUG (AbstractFlushingEventListener.java:108 LINE) AbstractFlushingEventListener.flushEverythingToExecutions -> Flushed: 0 insertions, 0 updates, 0 deletions to 1 objects
2015-11-24 16:23:22,80415-11-24 16:23:22 DEBUG (AbstractFlushingEventListener.java:114 LINE) AbstractFlushingEventListener.flushEverythingToExecutions -> Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
2015-11-24 16:23:22,80515-11-24 16:23:22 DEBUG (Printer.java:106 LINE) Printer.toString -> listing entities:
2015-11-24 16:23:22,80615-11-24 16:23:22 DEBUG (Printer.java:113 LINE) Printer.toString -> com.fx.mobile.model.UserOperate{createTime=null, birthday=null, sex=null, accessToken=a75e2666765d54ebe5cfcd8f919d4a40, openqq=null, userPassword=e10adc3949ba59abbe56e057, opensina=null, userEmail=null, userinfo=null, openKey=dbd2a27b2d6b4e0754b8539448fb3377, userType=userSrc, city=null, id=2, isChecked=null, province=null, userName=芳草碧连天, expireseIn=2015-11-23 15:21:49, opensinainfo=null, figureurl=null, lastLoginTime=null, updateTime=null, nickname=null, userPhoneNumb=18251901682, phicommId=124, openqqinfo=null, devinfo=null, openId=6f06d7f4-89ec-47ce-8cc2-7075223f6feb}
2015-11-24 16:23:22,80615-11-24 16:23:22 DEBUG (ConnectionManager.java:427 LINE) ConnectionManager.aggressiveRelease -> aggressively releasing JDBC connection
2015-11-24 16:23:22,80615-11-24 16:23:22 DEBUG (SessionFactoryUtils.java:800 LINE) SessionFactoryUtils.closeSession -> Closing Hibernate Session
2015-11-24 16:23:22,83015-11-24 16:23:22 DEBUG (DirtiesContextTestExecutionListener.java:107 LINE) DirtiesContextTestExecutionListener.afterTestMethod -> After test method: context [[TestContext@3b1a82fd testClass = UserOperateDaoImplTest, testInstance = com.fx.mobile.junit.UserOperateDaoImplTest@498dce5b, testMethod = getListTest@UserOperateDaoImplTest, testException = [null], mergedContextConfiguration = [MergedContextConfiguration@7ce6de16 testClass = UserOperateDaoImplTest, locations = '{classpath*:context/*-context.xml}', classes = '{}', contextInitializerClasses = '[]', activeProfiles = '{}', contextLoader = 'org.springframework.test.context.support.DelegatingSmartContextLoader', parent = [null]]]], class dirties context [false], class mode [null], method dirties context [false].
2015-11-24 16:23:22,83115-11-24 16:23:22 DEBUG (DirtiesContextTestExecutionListener.java:138 LINE) DirtiesContextTestExecutionListener.afterTestClass -> After test class: context [[TestContext@3b1a82fd testClass = UserOperateDaoImplTest, testInstance = [null], testMethod = [null], testException = [null], mergedContextConfiguration = [MergedContextConfiguration@7ce6de16 testClass = UserOperateDaoImplTest, locations = '{classpath*:context/*-context.xml}', classes = '{}', contextInitializerClasses = '[]', activeProfiles = '{}', contextLoader = 'org.springframework.test.context.support.DelegatingSmartContextLoader', parent = [null]]]], dirtiesContext [false].
2015-11-24 16:23:22,83315-11-24 16:23:22  INFO (AbstractApplicationContext.java:1042 LINE) AbstractApplicationContext.doClose -> Closing org.springframework.context.support.GenericApplicationContext@20a893d5: startup date [Tue Nov 24 16:23:17 CST 2015]; root of context hierarchy
2015-11-24 16:23:22,84115-11-24 16:23:22 DEBUG (AbstractBeanFactory.java:246 LINE) AbstractBeanFactory.doGetBean -> Returning cached instance of singleton bean 'lifecycleProcessor'
2015-11-24 16:23:22,84115-11-24 16:23:22  INFO (DefaultSingletonBeanRegistry.java:444 LINE) DefaultSingletonBeanRegistry.destroySingletons -> Destroying singletons in org.springframework.beans.factory.support.DefaultListableBeanFactory@245a690: defining beans [userOperateDao,userInterfaceDao,noteNumRecordDao,crashLogDao,dataSource,sessionFactory,org.springframework.aop.config.internalAutoProxyCreator,org.springframework.transaction.annotation.AnnotationTransactionAttributeSource#0,org.springframework.transaction.interceptor.TransactionInterceptor#0,org.springframework.transaction.config.internalTransactionAdvisor,transactionManager,org.springframework.context.annotation.internalConfigurationAnnotationProcessor,org.springframework.context.annotation.internalAutowiredAnnotationProcessor,org.springframework.context.annotation.internalRequiredAnnotationProcessor,org.springframework.context.annotation.internalCommonAnnotationProcessor,org.springframework.context.annotation.internalPersistenceAnnotationProcessor,crashLogService,noteNumRecordService,userInterfaceService,operateService,SpringContextUtil,fileRemote,corePropertyConfigurer,userinterfaceService,urlProperties,org.springframework.context.annotation.ConfigurationClassPostProcessor.importAwareProcessor]; root of factory hierarchy
2015-11-24 16:23:22,84615-11-24 16:23:22 DEBUG (DefaultSingletonBeanRegistry.java:500 LINE) DefaultSingletonBeanRegistry.destroyBean -> Retrieved dependent beans for bean 'userOperateDao': [com.fx.mobile.junit.UserOperateDaoImplTest]
2015-11-24 16:23:22,84615-11-24 16:23:22 DEBUG (DisposableBeanAdapter.java:219 LINE) DisposableBeanAdapter.destroy -> Invoking destroy() on bean with name 'sessionFactory'
2015-11-24 16:23:22,84615-11-24 16:23:22  INFO (AbstractSessionFactoryBean.java:223 LINE) AbstractSessionFactoryBean.destroy -> Closing Hibernate SessionFactory
2015-11-24 16:23:22,84615-11-24 16:23:22  INFO (SessionFactoryImpl.java:927 LINE) SessionFactoryImpl.close -> closing
2015-11-24 16:23:22,87515-11-24 16:23:22 DEBUG (DisposableBeanAdapter.java:295 LINE) DisposableBeanAdapter.invokeCustomDestroyMethod -> Invoking destroy method 'close' on bean with name 'dataSource'
